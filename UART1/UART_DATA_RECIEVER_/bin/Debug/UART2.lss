
bin\Debug\UART2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000001b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000038  00000000  00000000  000001d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000140  00000000  00000000  0000020b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c1  00000000  00000000  0000034b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000013d  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a4  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 #include <avr/io.h>
 int main()
 {
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	00 d0       	rcall	.+0      	; 0x86 <main+0x6>
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
     DDRD |=1<PIN4;
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	ea e2       	ldi	r30, 0x2A	; 42
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	81 60       	ori	r24, 0x01	; 1
  98:	8c 93       	st	X, r24
        DDRD |=1<PIN5;
  9a:	aa e2       	ldi	r26, 0x2A	; 42
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8c 93       	st	X, r24

DDRD &=~(1<<PIN2);
  a8:	aa e2       	ldi	r26, 0x2A	; 42
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	ea e2       	ldi	r30, 0x2A	; 42
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	8b 7f       	andi	r24, 0xFB	; 251
  b4:	8c 93       	st	X, r24
     PORTD |=(1<<PIN4);
  b6:	ab e2       	ldi	r26, 0x2B	; 43
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	eb e2       	ldi	r30, 0x2B	; 43
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	8c 93       	st	X, r24
  //  PORTD |=1<PIN4;
//PORTD |=(1<<PIN2);
     unsigned char receiver;
     int BAURD=207;
  c4:	8f ec       	ldi	r24, 0xCF	; 207
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	9a 83       	std	Y+2, r25	; 0x02
  ca:	89 83       	std	Y+1, r24	; 0x01
UBRR0H =(unsigned char) (BAURD>>8);
  cc:	e5 ec       	ldi	r30, 0xC5	; 197
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	9a 81       	ldd	r25, Y+2	; 0x02
  d4:	89 2f       	mov	r24, r25
  d6:	99 0f       	add	r25, r25
  d8:	99 0b       	sbc	r25, r25
  da:	80 83       	st	Z, r24
UBRR0L =(unsigned char) (BAURD);
  dc:	e4 ec       	ldi	r30, 0xC4	; 196
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	89 81       	ldd	r24, Y+1	; 0x01
  e2:	80 83       	st	Z, r24
UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  e4:	e1 ec       	ldi	r30, 0xC1	; 193
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	88 e1       	ldi	r24, 0x18	; 24
  ea:	80 83       	st	Z, r24
UCSR0C = 1<<USBS0;
  ec:	e2 ec       	ldi	r30, 0xC2	; 194
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	88 e0       	ldi	r24, 0x08	; 8
  f2:	80 83       	st	Z, r24
UCSR0C =(3<<UCSZ00);
  f4:	e2 ec       	ldi	r30, 0xC2	; 194
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	80 83       	st	Z, r24
     while(1){
        //PORTD ^=1<<PIN4;
        while (!(UCSR0A & (1<<RXC0)));
  fc:	e0 ec       	ldi	r30, 0xC0	; 192
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	88 23       	and	r24, r24
 104:	dc f7       	brge	.-10     	; 0xfc <main+0x7c>
        receiver = UDR0;
 106:	e6 ec       	ldi	r30, 0xC6	; 198
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	8b 83       	std	Y+3, r24	; 0x03
        if(receiver==0b11110000){
 10e:	8b 81       	ldd	r24, Y+3	; 0x03
 110:	80 3f       	cpi	r24, 0xF0	; 240
 112:	49 f4       	brne	.+18     	; 0x126 <main+0xa6>
           PORTB ^=1<<PIN4;
 114:	a5 e2       	ldi	r26, 0x25	; 37
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	e5 e2       	ldi	r30, 0x25	; 37
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	90 81       	ld	r25, Z
 11e:	80 e1       	ldi	r24, 0x10	; 16
 120:	89 27       	eor	r24, r25
 122:	8c 93       	st	X, r24
 124:	eb cf       	rjmp	.-42     	; 0xfc <main+0x7c>
        }
        else
        {
          PORTB ^=1<<PIN5;
 126:	a5 e2       	ldi	r26, 0x25	; 37
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	e5 e2       	ldi	r30, 0x25	; 37
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	90 81       	ld	r25, Z
 130:	80 e2       	ldi	r24, 0x20	; 32
 132:	89 27       	eor	r24, r25
 134:	8c 93       	st	X, r24
 136:	e2 cf       	rjmp	.-60     	; 0xfc <main+0x7c>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
