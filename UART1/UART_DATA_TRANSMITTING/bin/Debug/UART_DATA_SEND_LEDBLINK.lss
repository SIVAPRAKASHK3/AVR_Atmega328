
bin\Debug\UART_DATA_SEND_LEDBLINK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000023b  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000038  00000000  00000000  0000025b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000168  00000000  00000000  00000293  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000d0  00000000  00000000  000003fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001e8  00000000  00000000  000004cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  000006b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000df  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
*/

#include <avr/io.h>

int main(void)
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	27 97       	sbiw	r28, 0x07	; 7
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
DDRB |=1<<PIN4;
  94:	a4 e2       	ldi	r26, 0x24	; 36
  96:	b0 e0       	ldi	r27, 0x00	; 0
  98:	e4 e2       	ldi	r30, 0x24	; 36
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	8c 93       	st	X, r24
PORTB &=~(1<<PIN4);
  a2:	a5 e2       	ldi	r26, 0x25	; 37
  a4:	b0 e0       	ldi	r27, 0x00	; 0
  a6:	e5 e2       	ldi	r30, 0x25	; 37
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	8f 7e       	andi	r24, 0xEF	; 239
  ae:	8c 93       	st	X, r24
DDRB |=1<<PIN5;
  b0:	a4 e2       	ldi	r26, 0x24	; 36
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	e4 e2       	ldi	r30, 0x24	; 36
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	8c 93       	st	X, r24
PORTB &=~(1<<PIN5);
  be:	a5 e2       	ldi	r26, 0x25	; 37
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	e5 e2       	ldi	r30, 0x25	; 37
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	8f 7d       	andi	r24, 0xDF	; 223
  ca:	8c 93       	st	X, r24
DDRB &=~(1<<PIN3);
  cc:	a4 e2       	ldi	r26, 0x24	; 36
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	e4 e2       	ldi	r30, 0x24	; 36
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	87 7f       	andi	r24, 0xF7	; 247
  d8:	8c 93       	st	X, r24
PORTB |=(1<<PIN3); //switch is high in inital state
  da:	a5 e2       	ldi	r26, 0x25	; 37
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	e5 e2       	ldi	r30, 0x25	; 37
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	8c 93       	st	X, r24
uint8_t PRESSED=0;
  e8:	1f 82       	std	Y+7, r1	; 0x07
int PRESS_CONFIDENT=0;
  ea:	1e 82       	std	Y+6, r1	; 0x06
  ec:	1d 82       	std	Y+5, r1	; 0x05
int RELEASE_CONFIDENT=0;
  ee:	1c 82       	std	Y+4, r1	; 0x04
  f0:	1b 82       	std	Y+3, r1	; 0x03
int BAURD=207;
  f2:	8f ec       	ldi	r24, 0xCF	; 207
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	9a 83       	std	Y+2, r25	; 0x02
  f8:	89 83       	std	Y+1, r24	; 0x01
UBRR0H =(unsigned char) (BAURD>>8);
  fa:	e5 ec       	ldi	r30, 0xC5	; 197
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	9a 81       	ldd	r25, Y+2	; 0x02
 102:	89 2f       	mov	r24, r25
 104:	99 0f       	add	r25, r25
 106:	99 0b       	sbc	r25, r25
 108:	80 83       	st	Z, r24
UBRR0L =(unsigned char) (BAURD);
 10a:	e4 ec       	ldi	r30, 0xC4	; 196
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	80 83       	st	Z, r24
UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 112:	e1 ec       	ldi	r30, 0xC1	; 193
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	88 e1       	ldi	r24, 0x18	; 24
 118:	80 83       	st	Z, r24
UCSR0C = 1<<USBS0;
 11a:	e2 ec       	ldi	r30, 0xC2	; 194
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	88 e0       	ldi	r24, 0x08	; 8
 120:	80 83       	st	Z, r24
UCSR0C =(3<<UCSZ00);
 122:	e2 ec       	ldi	r30, 0xC2	; 194
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	86 e0       	ldi	r24, 0x06	; 6
 128:	80 83       	st	Z, r24
    while(1)
    {
        if(bit_is_clear(PIND,3))
 12a:	e9 e2       	ldi	r30, 0x29	; 41
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	88 2f       	mov	r24, r24
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	88 70       	andi	r24, 0x08	; 8
 136:	90 70       	andi	r25, 0x00	; 0
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	89 f5       	brne	.+98     	; 0x19e <main+0x11e>
        {
            PRESS_CONFIDENT++;
 13c:	8d 81       	ldd	r24, Y+5	; 0x05
 13e:	9e 81       	ldd	r25, Y+6	; 0x06
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	9e 83       	std	Y+6, r25	; 0x06
 144:	8d 83       	std	Y+5, r24	; 0x05
            RELEASE_CONFIDENT=0;
 146:	1c 82       	std	Y+4, r1	; 0x04
 148:	1b 82       	std	Y+3, r1	; 0x03
            if(PRESS_CONFIDENT>200 ){
 14a:	8d 81       	ldd	r24, Y+5	; 0x05
 14c:	9e 81       	ldd	r25, Y+6	; 0x06
 14e:	89 3c       	cpi	r24, 0xC9	; 201
 150:	91 05       	cpc	r25, r1
 152:	5c f3       	brlt	.-42     	; 0x12a <main+0xaa>
                if(PRESSED==0)
 154:	8f 81       	ldd	r24, Y+7	; 0x07
 156:	88 23       	and	r24, r24
 158:	f9 f4       	brne	.+62     	; 0x198 <main+0x118>
                {     PRESSED=1;
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	8f 83       	std	Y+7, r24	; 0x07
                     PORTB ^=1<<PIN4;
 15e:	a5 e2       	ldi	r26, 0x25	; 37
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	e5 e2       	ldi	r30, 0x25	; 37
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	90 81       	ld	r25, Z
 168:	80 e1       	ldi	r24, 0x10	; 16
 16a:	89 27       	eor	r24, r25
 16c:	8c 93       	st	X, r24
                     while(!(UCSR0A &(1<<UDRE0))); //8BIT DATA TRANSFER
 16e:	e0 ec       	ldi	r30, 0xC0	; 192
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	88 2f       	mov	r24, r24
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	80 72       	andi	r24, 0x20	; 32
 17a:	90 70       	andi	r25, 0x00	; 0
 17c:	00 97       	sbiw	r24, 0x00	; 0
 17e:	b9 f3       	breq	.-18     	; 0x16e <main+0xee>
                     UDR0 =0b11110000;
 180:	e6 ec       	ldi	r30, 0xC6	; 198
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 ef       	ldi	r24, 0xF0	; 240
 186:	80 83       	st	Z, r24
                     PORTB ^=1<<PIN5;
 188:	a5 e2       	ldi	r26, 0x25	; 37
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	e5 e2       	ldi	r30, 0x25	; 37
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	90 81       	ld	r25, Z
 192:	80 e2       	ldi	r24, 0x20	; 32
 194:	89 27       	eor	r24, r25
 196:	8c 93       	st	X, r24

                }
            PRESS_CONFIDENT=0;
 198:	1e 82       	std	Y+6, r1	; 0x06
 19a:	1d 82       	std	Y+5, r1	; 0x05
 19c:	c6 cf       	rjmp	.-116    	; 0x12a <main+0xaa>
        }}
        else
        {
            RELEASE_CONFIDENT++;
 19e:	8b 81       	ldd	r24, Y+3	; 0x03
 1a0:	9c 81       	ldd	r25, Y+4	; 0x04
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	9c 83       	std	Y+4, r25	; 0x04
 1a6:	8b 83       	std	Y+3, r24	; 0x03
            PRESS_CONFIDENT=0;
 1a8:	1e 82       	std	Y+6, r1	; 0x06
 1aa:	1d 82       	std	Y+5, r1	; 0x05
            if(RELEASE_CONFIDENT >200)
 1ac:	8b 81       	ldd	r24, Y+3	; 0x03
 1ae:	9c 81       	ldd	r25, Y+4	; 0x04
 1b0:	89 3c       	cpi	r24, 0xC9	; 201
 1b2:	91 05       	cpc	r25, r1
 1b4:	0c f4       	brge	.+2      	; 0x1b8 <main+0x138>
 1b6:	b9 cf       	rjmp	.-142    	; 0x12a <main+0xaa>
            { //PORTD ^=1<<PIN4;
               RELEASE_CONFIDENT=0;
 1b8:	1c 82       	std	Y+4, r1	; 0x04
 1ba:	1b 82       	std	Y+3, r1	; 0x03
                PRESSED=0;
 1bc:	1f 82       	std	Y+7, r1	; 0x07
 1be:	b5 cf       	rjmp	.-150    	; 0x12a <main+0xaa>

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
