
bin\Debug\Button_press.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000001c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000038  00000000  00000000  000001e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000014f  00000000  00000000  00000221  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000c3  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000015d  00000000  00000000  00000433  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000aa  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 */

#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	00 d0       	rcall	.+0      	; 0x86 <main+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x8>
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0xa>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62

    // Insert code
DDRB |=(1<<PIN2)|(1<<PIN4);
  8e:	a4 e2       	ldi	r26, 0x24	; 36
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	e4 e2       	ldi	r30, 0x24	; 36
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	84 61       	ori	r24, 0x14	; 20
  9a:	8c 93       	st	X, r24
DDRB &=~(1<<PIN3); // setting port b pin 3 as input
  9c:	a4 e2       	ldi	r26, 0x24	; 36
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	e4 e2       	ldi	r30, 0x24	; 36
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	8c 93       	st	X, r24
//DDRB = 00000001;
PORTB |=(1<<PIN3);
  aa:	a5 e2       	ldi	r26, 0x25	; 37
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	e5 e2       	ldi	r30, 0x25	; 37
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	8c 93       	st	X, r24
PORTB ^=(1<<PIN2);
  b8:	a5 e2       	ldi	r26, 0x25	; 37
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	e5 e2       	ldi	r30, 0x25	; 37
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	84 e0       	ldi	r24, 0x04	; 4
  c4:	89 27       	eor	r24, r25
  c6:	8c 93       	st	X, r24
int press=0;
  c8:	1e 82       	std	Y+6, r1	; 0x06
  ca:	1d 82       	std	Y+5, r1	; 0x05
int release=0;
  cc:	1c 82       	std	Y+4, r1	; 0x04
  ce:	1b 82       	std	Y+3, r1	; 0x03
int valid =0;
  d0:	1a 82       	std	Y+2, r1	; 0x02
  d2:	19 82       	std	Y+1, r1	; 0x01
while(1)
    {
        if(bit_is_clear(PINB,3)){
  d4:	e3 e2       	ldi	r30, 0x23	; 35
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 2f       	mov	r24, r24
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	88 70       	andi	r24, 0x08	; 8
  e0:	90 70       	andi	r25, 0x00	; 0
  e2:	00 97       	sbiw	r24, 0x00	; 0
  e4:	29 f5       	brne	.+74     	; 0x130 <main+0xb0>
           press++;
  e6:	8d 81       	ldd	r24, Y+5	; 0x05
  e8:	9e 81       	ldd	r25, Y+6	; 0x06
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	9e 83       	std	Y+6, r25	; 0x06
  ee:	8d 83       	std	Y+5, r24	; 0x05
           if(press>200)
  f0:	8d 81       	ldd	r24, Y+5	; 0x05
  f2:	9e 81       	ldd	r25, Y+6	; 0x06
  f4:	89 3c       	cpi	r24, 0xC9	; 201
  f6:	91 05       	cpc	r25, r1
  f8:	6c f3       	brlt	.-38     	; 0xd4 <main+0x54>
          {
       	if(valid==0){
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	9a 81       	ldd	r25, Y+2	; 0x02
  fe:	00 97       	sbiw	r24, 0x00	; 0
 100:	a1 f4       	brne	.+40     	; 0x12a <main+0xaa>
            PORTB ^=(1<<PIN2);
 102:	a5 e2       	ldi	r26, 0x25	; 37
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e5 e2       	ldi	r30, 0x25	; 37
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	90 81       	ld	r25, Z
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	89 27       	eor	r24, r25
 110:	8c 93       	st	X, r24
		    PORTB ^=(1<<PIN4);
 112:	a5 e2       	ldi	r26, 0x25	; 37
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e5 e2       	ldi	r30, 0x25	; 37
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	90 81       	ld	r25, Z
 11c:	80 e1       	ldi	r24, 0x10	; 16
 11e:	89 27       	eor	r24, r25
 120:	8c 93       	st	X, r24
		   valid=1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	9a 83       	std	Y+2, r25	; 0x02
 128:	89 83       	std	Y+1, r24	; 0x01
        }
		   press=0;
 12a:	1e 82       	std	Y+6, r1	; 0x06
 12c:	1d 82       	std	Y+5, r1	; 0x05
 12e:	d2 cf       	rjmp	.-92     	; 0xd4 <main+0x54>
        }
        }
        else{
          release++;
 130:	8b 81       	ldd	r24, Y+3	; 0x03
 132:	9c 81       	ldd	r25, Y+4	; 0x04
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	9c 83       	std	Y+4, r25	; 0x04
 138:	8b 83       	std	Y+3, r24	; 0x03
          if(release>200){
 13a:	8b 81       	ldd	r24, Y+3	; 0x03
 13c:	9c 81       	ldd	r25, Y+4	; 0x04
 13e:	89 3c       	cpi	r24, 0xC9	; 201
 140:	91 05       	cpc	r25, r1
 142:	44 f2       	brlt	.-112    	; 0xd4 <main+0x54>
          valid=0;
 144:	1a 82       	std	Y+2, r1	; 0x02
 146:	19 82       	std	Y+1, r1	; 0x01
          release=0;}
 148:	1c 82       	std	Y+4, r1	; 0x04
 14a:	1b 82       	std	Y+3, r1	; 0x03
 14c:	c3 cf       	rjmp	.-122    	; 0xd4 <main+0x54>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
