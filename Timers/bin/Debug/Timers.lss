
bin\Debug\Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  000001c2  2**0
                  ALLOC
  2 .fuse         00000003  00820000  00820000  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  000001c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000004c  00000000  00000000  000001e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000015b  00000000  00000000  00000231  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d6  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000125  00000000  00000000  00000462  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000588  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000a8  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/io.h>
int  timer=0;
int reset=0;

int main(void)
{
  90:	df 93       	push	r29
  92:	cf 93       	push	r28
  94:	00 d0       	rcall	.+0      	; 0x96 <main+0x6>
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62

DDRD &=~(1<<PIN0);
  9a:	aa e2       	ldi	r26, 0x2A	; 42
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	8e 7f       	andi	r24, 0xFE	; 254
  a6:	8c 93       	st	X, r24
DDRD |= (1<<PIN1)|(1<<PIN2);
  a8:	aa e2       	ldi	r26, 0x2A	; 42
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	ea e2       	ldi	r30, 0x2A	; 42
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	86 60       	ori	r24, 0x06	; 6
  b4:	8c 93       	st	X, r24
int COUNT=0;
  b6:	1a 82       	std	Y+2, r1	; 0x02
  b8:	19 82       	std	Y+1, r1	; 0x01
//PORTD |=1<<PIN0;
PORTD ^=1<<PIN1;
  ba:	ab e2       	ldi	r26, 0x2B	; 43
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	eb e2       	ldi	r30, 0x2B	; 43
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	90 81       	ld	r25, Z
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	89 27       	eor	r24, r25
  c8:	8c 93       	st	X, r24
TCCR1B |=1<<CS10|1<<CS11; //PRESCALE 64
  ca:	a1 e8       	ldi	r26, 0x81	; 129
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e1 e8       	ldi	r30, 0x81	; 129
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	83 60       	ori	r24, 0x03	; 3
  d6:	8c 93       	st	X, r24
    while(1)
    {
        if(TCNT1>64600){
  d8:	e4 e8       	ldi	r30, 0x84	; 132
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	91 81       	ldd	r25, Z+1	; 0x01
  e0:	2c ef       	ldi	r18, 0xFC	; 252
  e2:	89 35       	cpi	r24, 0x59	; 89
  e4:	92 07       	cpc	r25, r18
  e6:	c0 f3       	brcs	.-16     	; 0xd8 <main+0x48>
                TCNT1=0;
  e8:	e4 e8       	ldi	r30, 0x84	; 132
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	11 82       	std	Z+1, r1	; 0x01
  ee:	10 82       	st	Z, r1
            PORTD^=1<<PIN1;  //EIGHT BLINK PIN1 LED EQUALS 1 PIN2 LED BLINK;
  f0:	ab e2       	ldi	r26, 0x2B	; 43
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	eb e2       	ldi	r30, 0x2B	; 43
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	90 81       	ld	r25, Z
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	89 27       	eor	r24, r25
  fe:	8c 93       	st	X, r24
        if(COUNT>8){
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	9a 81       	ldd	r25, Y+2	; 0x02
 104:	89 30       	cpi	r24, 0x09	; 9
 106:	91 05       	cpc	r25, r1
 108:	54 f0       	brlt	.+20     	; 0x11e <main+0x8e>
             //_delay_ms(500);
               PORTD^=1<<PIN2;
 10a:	ab e2       	ldi	r26, 0x2B	; 43
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	eb e2       	ldi	r30, 0x2B	; 43
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	90 81       	ld	r25, Z
 114:	84 e0       	ldi	r24, 0x04	; 4
 116:	89 27       	eor	r24, r25
 118:	8c 93       	st	X, r24
               COUNT=0;}
 11a:	1a 82       	std	Y+2, r1	; 0x02
 11c:	19 82       	std	Y+1, r1	; 0x01
                 COUNT++;
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	9a 81       	ldd	r25, Y+2	; 0x02
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	9a 83       	std	Y+2, r25	; 0x02
 126:	89 83       	std	Y+1, r24	; 0x01
 128:	d7 cf       	rjmp	.-82     	; 0xd8 <main+0x48>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
