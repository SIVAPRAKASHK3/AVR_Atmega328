
bin\Debug\SAMPLE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000017cc  00001880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017cc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800112  00800112  00001892  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00001892  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000180  00000000  00000000  00001895  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000025b  00000000  00000000  00001a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002611  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012fc  00000000  00000000  00004281  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000155f  00000000  00000000  0000557d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  00006adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ff  00000000  00000000  00006d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000711b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000079a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 9a 04 	jmp	0x934	; 0x934 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ec       	ldi	r30, 0xCC	; 204
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a2 31       	cpi	r26, 0x12	; 18
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a2 e1       	ldi	r26, 0x12	; 18
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 31       	cpi	r26, 0x14	; 20
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 76 04 	call	0x8ec	; 0x8ec <main>
      9e:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_initialization>:
void TEXT(unsigned char INPUT);
int i=0;
int row_lcd [4]={0,64,20,84};

void lcd_initialization(void)
{
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	df 93       	push	r29
      ac:	cf 93       	push	r28
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	cc 54       	subi	r28, 0x4C	; 76
      b4:	d0 40       	sbci	r29, 0x00	; 0
      b6:	0f b6       	in	r0, 0x3f	; 63
      b8:	f8 94       	cli
      ba:	de bf       	out	0x3e, r29	; 62
      bc:	0f be       	out	0x3f, r0	; 63
      be:	cd bf       	out	0x3d, r28	; 61
CONTROL_DDR |=1<< REGISTR_SEL | 1<<READ_WRITE |1<<ENABLE;
      c0:	a4 e2       	ldi	r26, 0x24	; 36
      c2:	b0 e0       	ldi	r27, 0x00	; 0
      c4:	e4 e2       	ldi	r30, 0x24	; 36
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	80 81       	ld	r24, Z
      ca:	8e 60       	ori	r24, 0x0E	; 14
      cc:	8c 93       	st	X, r24
      ce:	fe 01       	movw	r30, r28
      d0:	e7 5b       	subi	r30, 0xB7	; 183
      d2:	ff 4f       	sbci	r31, 0xFF	; 255
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	a0 e7       	ldi	r26, 0x70	; 112
      da:	b1 e4       	ldi	r27, 0x41	; 65
      dc:	80 83       	st	Z, r24
      de:	91 83       	std	Z+1, r25	; 0x01
      e0:	a2 83       	std	Z+2, r26	; 0x02
      e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      e4:	8e 01       	movw	r16, r28
      e6:	0b 5b       	subi	r16, 0xBB	; 187
      e8:	1f 4f       	sbci	r17, 0xFF	; 255
      ea:	fe 01       	movw	r30, r28
      ec:	e7 5b       	subi	r30, 0xB7	; 183
      ee:	ff 4f       	sbci	r31, 0xFF	; 255
      f0:	60 81       	ld	r22, Z
      f2:	71 81       	ldd	r23, Z+1	; 0x01
      f4:	82 81       	ldd	r24, Z+2	; 0x02
      f6:	93 81       	ldd	r25, Z+3	; 0x03
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	4a e7       	ldi	r20, 0x7A	; 122
      fe:	55 e4       	ldi	r21, 0x45	; 69
     100:	0e 94 34 07 	call	0xe68	; 0xe68 <__mulsf3>
     104:	dc 01       	movw	r26, r24
     106:	cb 01       	movw	r24, r22
     108:	f8 01       	movw	r30, r16
     10a:	80 83       	st	Z, r24
     10c:	91 83       	std	Z+1, r25	; 0x01
     10e:	a2 83       	std	Z+2, r26	; 0x02
     110:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     112:	fe 01       	movw	r30, r28
     114:	eb 5b       	subi	r30, 0xBB	; 187
     116:	ff 4f       	sbci	r31, 0xFF	; 255
     118:	60 81       	ld	r22, Z
     11a:	71 81       	ldd	r23, Z+1	; 0x01
     11c:	82 81       	ldd	r24, Z+2	; 0x02
     11e:	93 81       	ldd	r25, Z+3	; 0x03
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	40 e8       	ldi	r20, 0x80	; 128
     126:	5f e3       	ldi	r21, 0x3F	; 63
     128:	0e 94 3a 09 	call	0x1274	; 0x1274 <__ltsf2>
     12c:	88 23       	and	r24, r24
     12e:	44 f4       	brge	.+16     	; 0x140 <lcd_initialization+0x9a>
		__ticks = 1;
     130:	fe 01       	movw	r30, r28
     132:	ed 5b       	subi	r30, 0xBD	; 189
     134:	ff 4f       	sbci	r31, 0xFF	; 255
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	91 83       	std	Z+1, r25	; 0x01
     13c:	80 83       	st	Z, r24
     13e:	64 c0       	rjmp	.+200    	; 0x208 <lcd_initialization+0x162>
	else if (__tmp > 65535)
     140:	fe 01       	movw	r30, r28
     142:	eb 5b       	subi	r30, 0xBB	; 187
     144:	ff 4f       	sbci	r31, 0xFF	; 255
     146:	60 81       	ld	r22, Z
     148:	71 81       	ldd	r23, Z+1	; 0x01
     14a:	82 81       	ldd	r24, Z+2	; 0x02
     14c:	93 81       	ldd	r25, Z+3	; 0x03
     14e:	20 e0       	ldi	r18, 0x00	; 0
     150:	3f ef       	ldi	r19, 0xFF	; 255
     152:	4f e7       	ldi	r20, 0x7F	; 127
     154:	57 e4       	ldi	r21, 0x47	; 71
     156:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__gtsf2>
     15a:	18 16       	cp	r1, r24
     15c:	0c f0       	brlt	.+2      	; 0x160 <lcd_initialization+0xba>
     15e:	43 c0       	rjmp	.+134    	; 0x1e6 <lcd_initialization+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     160:	fe 01       	movw	r30, r28
     162:	e7 5b       	subi	r30, 0xB7	; 183
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	60 81       	ld	r22, Z
     168:	71 81       	ldd	r23, Z+1	; 0x01
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	40 e2       	ldi	r20, 0x20	; 32
     174:	51 e4       	ldi	r21, 0x41	; 65
     176:	0e 94 34 07 	call	0xe68	; 0xe68 <__mulsf3>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	8e 01       	movw	r16, r28
     180:	0d 5b       	subi	r16, 0xBD	; 189
     182:	1f 4f       	sbci	r17, 0xFF	; 255
     184:	bc 01       	movw	r22, r24
     186:	cd 01       	movw	r24, r26
     188:	0e 94 5e 05 	call	0xabc	; 0xabc <__fixunssfsi>
     18c:	dc 01       	movw	r26, r24
     18e:	cb 01       	movw	r24, r22
     190:	f8 01       	movw	r30, r16
     192:	91 83       	std	Z+1, r25	; 0x01
     194:	80 83       	st	Z, r24
     196:	1f c0       	rjmp	.+62     	; 0x1d6 <lcd_initialization+0x130>
     198:	fe 01       	movw	r30, r28
     19a:	ef 5b       	subi	r30, 0xBF	; 191
     19c:	ff 4f       	sbci	r31, 0xFF	; 255
     19e:	80 e9       	ldi	r24, 0x90	; 144
     1a0:	91 e0       	ldi	r25, 0x01	; 1
     1a2:	91 83       	std	Z+1, r25	; 0x01
     1a4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1a6:	fe 01       	movw	r30, r28
     1a8:	ef 5b       	subi	r30, 0xBF	; 191
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	80 81       	ld	r24, Z
     1ae:	91 81       	ldd	r25, Z+1	; 0x01
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_initialization+0x10a>
     1b4:	fe 01       	movw	r30, r28
     1b6:	ef 5b       	subi	r30, 0xBF	; 191
     1b8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ba:	91 83       	std	Z+1, r25	; 0x01
     1bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1be:	de 01       	movw	r26, r28
     1c0:	ad 5b       	subi	r26, 0xBD	; 189
     1c2:	bf 4f       	sbci	r27, 0xFF	; 255
     1c4:	fe 01       	movw	r30, r28
     1c6:	ed 5b       	subi	r30, 0xBD	; 189
     1c8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ca:	80 81       	ld	r24, Z
     1cc:	91 81       	ldd	r25, Z+1	; 0x01
     1ce:	01 97       	sbiw	r24, 0x01	; 1
     1d0:	11 96       	adiw	r26, 0x01	; 1
     1d2:	9c 93       	st	X, r25
     1d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1d6:	fe 01       	movw	r30, r28
     1d8:	ed 5b       	subi	r30, 0xBD	; 189
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	80 81       	ld	r24, Z
     1de:	91 81       	ldd	r25, Z+1	; 0x01
     1e0:	00 97       	sbiw	r24, 0x00	; 0
     1e2:	d1 f6       	brne	.-76     	; 0x198 <lcd_initialization+0xf2>
     1e4:	24 c0       	rjmp	.+72     	; 0x22e <lcd_initialization+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1e6:	8e 01       	movw	r16, r28
     1e8:	0d 5b       	subi	r16, 0xBD	; 189
     1ea:	1f 4f       	sbci	r17, 0xFF	; 255
     1ec:	fe 01       	movw	r30, r28
     1ee:	eb 5b       	subi	r30, 0xBB	; 187
     1f0:	ff 4f       	sbci	r31, 0xFF	; 255
     1f2:	60 81       	ld	r22, Z
     1f4:	71 81       	ldd	r23, Z+1	; 0x01
     1f6:	82 81       	ldd	r24, Z+2	; 0x02
     1f8:	93 81       	ldd	r25, Z+3	; 0x03
     1fa:	0e 94 5e 05 	call	0xabc	; 0xabc <__fixunssfsi>
     1fe:	dc 01       	movw	r26, r24
     200:	cb 01       	movw	r24, r22
     202:	f8 01       	movw	r30, r16
     204:	91 83       	std	Z+1, r25	; 0x01
     206:	80 83       	st	Z, r24
     208:	fe 01       	movw	r30, r28
     20a:	ed 5b       	subi	r30, 0xBD	; 189
     20c:	ff 4f       	sbci	r31, 0xFF	; 255
     20e:	80 81       	ld	r24, Z
     210:	91 81       	ldd	r25, Z+1	; 0x01
     212:	fe 01       	movw	r30, r28
     214:	ff 96       	adiw	r30, 0x3f	; 63
     216:	91 83       	std	Z+1, r25	; 0x01
     218:	80 83       	st	Z, r24
     21a:	fe 01       	movw	r30, r28
     21c:	ff 96       	adiw	r30, 0x3f	; 63
     21e:	80 81       	ld	r24, Z
     220:	91 81       	ldd	r25, Z+1	; 0x01
     222:	01 97       	sbiw	r24, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <lcd_initialization+0x17c>
     226:	fe 01       	movw	r30, r28
     228:	ff 96       	adiw	r30, 0x3f	; 63
     22a:	91 83       	std	Z+1, r25	; 0x01
     22c:	80 83       	st	Z, r24
_delay_ms(15);
CURSOUR(0x01);// clear lcd display
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	0e 94 73 03 	call	0x6e6	; 0x6e6 <CURSOUR>
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	a0 e0       	ldi	r26, 0x00	; 0
     23a:	b0 e4       	ldi	r27, 0x40	; 64
     23c:	8b af       	std	Y+59, r24	; 0x3b
     23e:	9c af       	std	Y+60, r25	; 0x3c
     240:	ad af       	std	Y+61, r26	; 0x3d
     242:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     244:	6b ad       	ldd	r22, Y+59	; 0x3b
     246:	7c ad       	ldd	r23, Y+60	; 0x3c
     248:	8d ad       	ldd	r24, Y+61	; 0x3d
     24a:	9e ad       	ldd	r25, Y+62	; 0x3e
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	4a e7       	ldi	r20, 0x7A	; 122
     252:	55 e4       	ldi	r21, 0x45	; 69
     254:	0e 94 34 07 	call	0xe68	; 0xe68 <__mulsf3>
     258:	dc 01       	movw	r26, r24
     25a:	cb 01       	movw	r24, r22
     25c:	8f ab       	std	Y+55, r24	; 0x37
     25e:	98 af       	std	Y+56, r25	; 0x38
     260:	a9 af       	std	Y+57, r26	; 0x39
     262:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     264:	6f a9       	ldd	r22, Y+55	; 0x37
     266:	78 ad       	ldd	r23, Y+56	; 0x38
     268:	89 ad       	ldd	r24, Y+57	; 0x39
     26a:	9a ad       	ldd	r25, Y+58	; 0x3a
     26c:	20 e0       	ldi	r18, 0x00	; 0
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	40 e8       	ldi	r20, 0x80	; 128
     272:	5f e3       	ldi	r21, 0x3F	; 63
     274:	0e 94 3a 09 	call	0x1274	; 0x1274 <__ltsf2>
     278:	88 23       	and	r24, r24
     27a:	2c f4       	brge	.+10     	; 0x286 <lcd_initialization+0x1e0>
		__ticks = 1;
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	9e ab       	std	Y+54, r25	; 0x36
     282:	8d ab       	std	Y+53, r24	; 0x35
     284:	3f c0       	rjmp	.+126    	; 0x304 <lcd_initialization+0x25e>
	else if (__tmp > 65535)
     286:	6f a9       	ldd	r22, Y+55	; 0x37
     288:	78 ad       	ldd	r23, Y+56	; 0x38
     28a:	89 ad       	ldd	r24, Y+57	; 0x39
     28c:	9a ad       	ldd	r25, Y+58	; 0x3a
     28e:	20 e0       	ldi	r18, 0x00	; 0
     290:	3f ef       	ldi	r19, 0xFF	; 255
     292:	4f e7       	ldi	r20, 0x7F	; 127
     294:	57 e4       	ldi	r21, 0x47	; 71
     296:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__gtsf2>
     29a:	18 16       	cp	r1, r24
     29c:	4c f5       	brge	.+82     	; 0x2f0 <lcd_initialization+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     29e:	6b ad       	ldd	r22, Y+59	; 0x3b
     2a0:	7c ad       	ldd	r23, Y+60	; 0x3c
     2a2:	8d ad       	ldd	r24, Y+61	; 0x3d
     2a4:	9e ad       	ldd	r25, Y+62	; 0x3e
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	40 e2       	ldi	r20, 0x20	; 32
     2ac:	51 e4       	ldi	r21, 0x41	; 65
     2ae:	0e 94 34 07 	call	0xe68	; 0xe68 <__mulsf3>
     2b2:	dc 01       	movw	r26, r24
     2b4:	cb 01       	movw	r24, r22
     2b6:	bc 01       	movw	r22, r24
     2b8:	cd 01       	movw	r24, r26
     2ba:	0e 94 5e 05 	call	0xabc	; 0xabc <__fixunssfsi>
     2be:	dc 01       	movw	r26, r24
     2c0:	cb 01       	movw	r24, r22
     2c2:	9e ab       	std	Y+54, r25	; 0x36
     2c4:	8d ab       	std	Y+53, r24	; 0x35
     2c6:	0f c0       	rjmp	.+30     	; 0x2e6 <lcd_initialization+0x240>
     2c8:	80 e9       	ldi	r24, 0x90	; 144
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	9c ab       	std	Y+52, r25	; 0x34
     2ce:	8b ab       	std	Y+51, r24	; 0x33
     2d0:	8b a9       	ldd	r24, Y+51	; 0x33
     2d2:	9c a9       	ldd	r25, Y+52	; 0x34
     2d4:	01 97       	sbiw	r24, 0x01	; 1
     2d6:	f1 f7       	brne	.-4      	; 0x2d4 <lcd_initialization+0x22e>
     2d8:	9c ab       	std	Y+52, r25	; 0x34
     2da:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2dc:	8d a9       	ldd	r24, Y+53	; 0x35
     2de:	9e a9       	ldd	r25, Y+54	; 0x36
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	9e ab       	std	Y+54, r25	; 0x36
     2e4:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2e6:	8d a9       	ldd	r24, Y+53	; 0x35
     2e8:	9e a9       	ldd	r25, Y+54	; 0x36
     2ea:	00 97       	sbiw	r24, 0x00	; 0
     2ec:	69 f7       	brne	.-38     	; 0x2c8 <lcd_initialization+0x222>
     2ee:	14 c0       	rjmp	.+40     	; 0x318 <lcd_initialization+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2f0:	6f a9       	ldd	r22, Y+55	; 0x37
     2f2:	78 ad       	ldd	r23, Y+56	; 0x38
     2f4:	89 ad       	ldd	r24, Y+57	; 0x39
     2f6:	9a ad       	ldd	r25, Y+58	; 0x3a
     2f8:	0e 94 5e 05 	call	0xabc	; 0xabc <__fixunssfsi>
     2fc:	dc 01       	movw	r26, r24
     2fe:	cb 01       	movw	r24, r22
     300:	9e ab       	std	Y+54, r25	; 0x36
     302:	8d ab       	std	Y+53, r24	; 0x35
     304:	8d a9       	ldd	r24, Y+53	; 0x35
     306:	9e a9       	ldd	r25, Y+54	; 0x36
     308:	9a ab       	std	Y+50, r25	; 0x32
     30a:	89 ab       	std	Y+49, r24	; 0x31
     30c:	89 a9       	ldd	r24, Y+49	; 0x31
     30e:	9a a9       	ldd	r25, Y+50	; 0x32
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <lcd_initialization+0x26a>
     314:	9a ab       	std	Y+50, r25	; 0x32
     316:	89 ab       	std	Y+49, r24	; 0x31
_delay_ms(2);
CURSOUR(0x38); // set 8 bit 2 line for 1 line 0x30
     318:	88 e3       	ldi	r24, 0x38	; 56
     31a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <CURSOUR>
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	a8 e4       	ldi	r26, 0x48	; 72
     324:	b2 e4       	ldi	r27, 0x42	; 66
     326:	8d a7       	std	Y+45, r24	; 0x2d
     328:	9e a7       	std	Y+46, r25	; 0x2e
     32a:	af a7       	std	Y+47, r26	; 0x2f
     32c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     32e:	6d a5       	ldd	r22, Y+45	; 0x2d
     330:	7e a5       	ldd	r23, Y+46	; 0x2e
     332:	8f a5       	ldd	r24, Y+47	; 0x2f
     334:	98 a9       	ldd	r25, Y+48	; 0x30
     336:	2b ea       	ldi	r18, 0xAB	; 171
     338:	3a ea       	ldi	r19, 0xAA	; 170
     33a:	4a ea       	ldi	r20, 0xAA	; 170
     33c:	50 e4       	ldi	r21, 0x40	; 64
     33e:	0e 94 34 07 	call	0xe68	; 0xe68 <__mulsf3>
     342:	dc 01       	movw	r26, r24
     344:	cb 01       	movw	r24, r22
     346:	89 a7       	std	Y+41, r24	; 0x29
     348:	9a a7       	std	Y+42, r25	; 0x2a
     34a:	ab a7       	std	Y+43, r26	; 0x2b
     34c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     34e:	69 a5       	ldd	r22, Y+41	; 0x29
     350:	7a a5       	ldd	r23, Y+42	; 0x2a
     352:	8b a5       	ldd	r24, Y+43	; 0x2b
     354:	9c a5       	ldd	r25, Y+44	; 0x2c
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	40 e8       	ldi	r20, 0x80	; 128
     35c:	5f e3       	ldi	r21, 0x3F	; 63
     35e:	0e 94 3a 09 	call	0x1274	; 0x1274 <__ltsf2>
     362:	88 23       	and	r24, r24
     364:	1c f4       	brge	.+6      	; 0x36c <lcd_initialization+0x2c6>
		__ticks = 1;
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	88 a7       	std	Y+40, r24	; 0x28
     36a:	91 c0       	rjmp	.+290    	; 0x48e <lcd_initialization+0x3e8>
	else if (__tmp > 255)
     36c:	69 a5       	ldd	r22, Y+41	; 0x29
     36e:	7a a5       	ldd	r23, Y+42	; 0x2a
     370:	8b a5       	ldd	r24, Y+43	; 0x2b
     372:	9c a5       	ldd	r25, Y+44	; 0x2c
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	4f e7       	ldi	r20, 0x7F	; 127
     37a:	53 e4       	ldi	r21, 0x43	; 67
     37c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__gtsf2>
     380:	18 16       	cp	r1, r24
     382:	0c f0       	brlt	.+2      	; 0x386 <lcd_initialization+0x2e0>
     384:	7b c0       	rjmp	.+246    	; 0x47c <lcd_initialization+0x3d6>
	{
		_delay_ms(__us / 1000.0);
     386:	6d a5       	ldd	r22, Y+45	; 0x2d
     388:	7e a5       	ldd	r23, Y+46	; 0x2e
     38a:	8f a5       	ldd	r24, Y+47	; 0x2f
     38c:	98 a9       	ldd	r25, Y+48	; 0x30
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	4a e7       	ldi	r20, 0x7A	; 122
     394:	54 e4       	ldi	r21, 0x44	; 68
     396:	0e 94 2e 08 	call	0x105c	; 0x105c <__divsf3>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	8c a3       	std	Y+36, r24	; 0x24
     3a0:	9d a3       	std	Y+37, r25	; 0x25
     3a2:	ae a3       	std	Y+38, r26	; 0x26
     3a4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3a6:	6c a1       	ldd	r22, Y+36	; 0x24
     3a8:	7d a1       	ldd	r23, Y+37	; 0x25
     3aa:	8e a1       	ldd	r24, Y+38	; 0x26
     3ac:	9f a1       	ldd	r25, Y+39	; 0x27
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	4a e7       	ldi	r20, 0x7A	; 122
     3b4:	55 e4       	ldi	r21, 0x45	; 69
     3b6:	0e 94 34 07 	call	0xe68	; 0xe68 <__mulsf3>
     3ba:	dc 01       	movw	r26, r24
     3bc:	cb 01       	movw	r24, r22
     3be:	88 a3       	std	Y+32, r24	; 0x20
     3c0:	99 a3       	std	Y+33, r25	; 0x21
     3c2:	aa a3       	std	Y+34, r26	; 0x22
     3c4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     3c6:	68 a1       	ldd	r22, Y+32	; 0x20
     3c8:	79 a1       	ldd	r23, Y+33	; 0x21
     3ca:	8a a1       	ldd	r24, Y+34	; 0x22
     3cc:	9b a1       	ldd	r25, Y+35	; 0x23
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	40 e8       	ldi	r20, 0x80	; 128
     3d4:	5f e3       	ldi	r21, 0x3F	; 63
     3d6:	0e 94 3a 09 	call	0x1274	; 0x1274 <__ltsf2>
     3da:	88 23       	and	r24, r24
     3dc:	2c f4       	brge	.+10     	; 0x3e8 <lcd_initialization+0x342>
		__ticks = 1;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	9f 8f       	std	Y+31, r25	; 0x1f
     3e4:	8e 8f       	std	Y+30, r24	; 0x1e
     3e6:	3f c0       	rjmp	.+126    	; 0x466 <lcd_initialization+0x3c0>
	else if (__tmp > 65535)
     3e8:	68 a1       	ldd	r22, Y+32	; 0x20
     3ea:	79 a1       	ldd	r23, Y+33	; 0x21
     3ec:	8a a1       	ldd	r24, Y+34	; 0x22
     3ee:	9b a1       	ldd	r25, Y+35	; 0x23
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	3f ef       	ldi	r19, 0xFF	; 255
     3f4:	4f e7       	ldi	r20, 0x7F	; 127
     3f6:	57 e4       	ldi	r21, 0x47	; 71
     3f8:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__gtsf2>
     3fc:	18 16       	cp	r1, r24
     3fe:	4c f5       	brge	.+82     	; 0x452 <lcd_initialization+0x3ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     400:	6c a1       	ldd	r22, Y+36	; 0x24
     402:	7d a1       	ldd	r23, Y+37	; 0x25
     404:	8e a1       	ldd	r24, Y+38	; 0x26
     406:	9f a1       	ldd	r25, Y+39	; 0x27
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e2       	ldi	r20, 0x20	; 32
     40e:	51 e4       	ldi	r21, 0x41	; 65
     410:	0e 94 34 07 	call	0xe68	; 0xe68 <__mulsf3>
     414:	dc 01       	movw	r26, r24
     416:	cb 01       	movw	r24, r22
     418:	bc 01       	movw	r22, r24
     41a:	cd 01       	movw	r24, r26
     41c:	0e 94 5e 05 	call	0xabc	; 0xabc <__fixunssfsi>
     420:	dc 01       	movw	r26, r24
     422:	cb 01       	movw	r24, r22
     424:	9f 8f       	std	Y+31, r25	; 0x1f
     426:	8e 8f       	std	Y+30, r24	; 0x1e
     428:	0f c0       	rjmp	.+30     	; 0x448 <lcd_initialization+0x3a2>
     42a:	80 e9       	ldi	r24, 0x90	; 144
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	9d 8f       	std	Y+29, r25	; 0x1d
     430:	8c 8f       	std	Y+28, r24	; 0x1c
     432:	8c 8d       	ldd	r24, Y+28	; 0x1c
     434:	9d 8d       	ldd	r25, Y+29	; 0x1d
     436:	01 97       	sbiw	r24, 0x01	; 1
     438:	f1 f7       	brne	.-4      	; 0x436 <lcd_initialization+0x390>
     43a:	9d 8f       	std	Y+29, r25	; 0x1d
     43c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     43e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     440:	9f 8d       	ldd	r25, Y+31	; 0x1f
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	9f 8f       	std	Y+31, r25	; 0x1f
     446:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     448:	8e 8d       	ldd	r24, Y+30	; 0x1e
     44a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     44c:	00 97       	sbiw	r24, 0x00	; 0
     44e:	69 f7       	brne	.-38     	; 0x42a <lcd_initialization+0x384>
     450:	24 c0       	rjmp	.+72     	; 0x49a <lcd_initialization+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     452:	68 a1       	ldd	r22, Y+32	; 0x20
     454:	79 a1       	ldd	r23, Y+33	; 0x21
     456:	8a a1       	ldd	r24, Y+34	; 0x22
     458:	9b a1       	ldd	r25, Y+35	; 0x23
     45a:	0e 94 5e 05 	call	0xabc	; 0xabc <__fixunssfsi>
     45e:	dc 01       	movw	r26, r24
     460:	cb 01       	movw	r24, r22
     462:	9f 8f       	std	Y+31, r25	; 0x1f
     464:	8e 8f       	std	Y+30, r24	; 0x1e
     466:	8e 8d       	ldd	r24, Y+30	; 0x1e
     468:	9f 8d       	ldd	r25, Y+31	; 0x1f
     46a:	9b 8f       	std	Y+27, r25	; 0x1b
     46c:	8a 8f       	std	Y+26, r24	; 0x1a
     46e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     470:	9b 8d       	ldd	r25, Y+27	; 0x1b
     472:	01 97       	sbiw	r24, 0x01	; 1
     474:	f1 f7       	brne	.-4      	; 0x472 <lcd_initialization+0x3cc>
     476:	9b 8f       	std	Y+27, r25	; 0x1b
     478:	8a 8f       	std	Y+26, r24	; 0x1a
     47a:	0f c0       	rjmp	.+30     	; 0x49a <lcd_initialization+0x3f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     47c:	69 a5       	ldd	r22, Y+41	; 0x29
     47e:	7a a5       	ldd	r23, Y+42	; 0x2a
     480:	8b a5       	ldd	r24, Y+43	; 0x2b
     482:	9c a5       	ldd	r25, Y+44	; 0x2c
     484:	0e 94 5e 05 	call	0xabc	; 0xabc <__fixunssfsi>
     488:	dc 01       	movw	r26, r24
     48a:	cb 01       	movw	r24, r22
     48c:	88 a7       	std	Y+40, r24	; 0x28
     48e:	88 a5       	ldd	r24, Y+40	; 0x28
     490:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     492:	89 8d       	ldd	r24, Y+25	; 0x19
     494:	8a 95       	dec	r24
     496:	f1 f7       	brne	.-4      	; 0x494 <lcd_initialization+0x3ee>
     498:	89 8f       	std	Y+25, r24	; 0x19
_delay_us(50);
CURSOUR(0b00001110); // display on cursor on 0x0E
     49a:	8e e0       	ldi	r24, 0x0E	; 14
     49c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <CURSOUR>
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	a8 e4       	ldi	r26, 0x48	; 72
     4a6:	b2 e4       	ldi	r27, 0x42	; 66
     4a8:	8d 8b       	std	Y+21, r24	; 0x15
     4aa:	9e 8b       	std	Y+22, r25	; 0x16
     4ac:	af 8b       	std	Y+23, r26	; 0x17
     4ae:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     4b0:	6d 89       	ldd	r22, Y+21	; 0x15
     4b2:	7e 89       	ldd	r23, Y+22	; 0x16
     4b4:	8f 89       	ldd	r24, Y+23	; 0x17
     4b6:	98 8d       	ldd	r25, Y+24	; 0x18
     4b8:	2b ea       	ldi	r18, 0xAB	; 171
     4ba:	3a ea       	ldi	r19, 0xAA	; 170
     4bc:	4a ea       	ldi	r20, 0xAA	; 170
     4be:	50 e4       	ldi	r21, 0x40	; 64
     4c0:	0e 94 34 07 	call	0xe68	; 0xe68 <__mulsf3>
     4c4:	dc 01       	movw	r26, r24
     4c6:	cb 01       	movw	r24, r22
     4c8:	89 8b       	std	Y+17, r24	; 0x11
     4ca:	9a 8b       	std	Y+18, r25	; 0x12
     4cc:	ab 8b       	std	Y+19, r26	; 0x13
     4ce:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     4d0:	69 89       	ldd	r22, Y+17	; 0x11
     4d2:	7a 89       	ldd	r23, Y+18	; 0x12
     4d4:	8b 89       	ldd	r24, Y+19	; 0x13
     4d6:	9c 89       	ldd	r25, Y+20	; 0x14
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	40 e8       	ldi	r20, 0x80	; 128
     4de:	5f e3       	ldi	r21, 0x3F	; 63
     4e0:	0e 94 3a 09 	call	0x1274	; 0x1274 <__ltsf2>
     4e4:	88 23       	and	r24, r24
     4e6:	1c f4       	brge	.+6      	; 0x4ee <lcd_initialization+0x448>
		__ticks = 1;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	88 8b       	std	Y+16, r24	; 0x10
     4ec:	91 c0       	rjmp	.+290    	; 0x610 <lcd_initialization+0x56a>
	else if (__tmp > 255)
     4ee:	69 89       	ldd	r22, Y+17	; 0x11
     4f0:	7a 89       	ldd	r23, Y+18	; 0x12
     4f2:	8b 89       	ldd	r24, Y+19	; 0x13
     4f4:	9c 89       	ldd	r25, Y+20	; 0x14
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	4f e7       	ldi	r20, 0x7F	; 127
     4fc:	53 e4       	ldi	r21, 0x43	; 67
     4fe:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__gtsf2>
     502:	18 16       	cp	r1, r24
     504:	0c f0       	brlt	.+2      	; 0x508 <lcd_initialization+0x462>
     506:	7b c0       	rjmp	.+246    	; 0x5fe <lcd_initialization+0x558>
	{
		_delay_ms(__us / 1000.0);
     508:	6d 89       	ldd	r22, Y+21	; 0x15
     50a:	7e 89       	ldd	r23, Y+22	; 0x16
     50c:	8f 89       	ldd	r24, Y+23	; 0x17
     50e:	98 8d       	ldd	r25, Y+24	; 0x18
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	4a e7       	ldi	r20, 0x7A	; 122
     516:	54 e4       	ldi	r21, 0x44	; 68
     518:	0e 94 2e 08 	call	0x105c	; 0x105c <__divsf3>
     51c:	dc 01       	movw	r26, r24
     51e:	cb 01       	movw	r24, r22
     520:	8c 87       	std	Y+12, r24	; 0x0c
     522:	9d 87       	std	Y+13, r25	; 0x0d
     524:	ae 87       	std	Y+14, r26	; 0x0e
     526:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     528:	6c 85       	ldd	r22, Y+12	; 0x0c
     52a:	7d 85       	ldd	r23, Y+13	; 0x0d
     52c:	8e 85       	ldd	r24, Y+14	; 0x0e
     52e:	9f 85       	ldd	r25, Y+15	; 0x0f
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	4a e7       	ldi	r20, 0x7A	; 122
     536:	55 e4       	ldi	r21, 0x45	; 69
     538:	0e 94 34 07 	call	0xe68	; 0xe68 <__mulsf3>
     53c:	dc 01       	movw	r26, r24
     53e:	cb 01       	movw	r24, r22
     540:	88 87       	std	Y+8, r24	; 0x08
     542:	99 87       	std	Y+9, r25	; 0x09
     544:	aa 87       	std	Y+10, r26	; 0x0a
     546:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     548:	68 85       	ldd	r22, Y+8	; 0x08
     54a:	79 85       	ldd	r23, Y+9	; 0x09
     54c:	8a 85       	ldd	r24, Y+10	; 0x0a
     54e:	9b 85       	ldd	r25, Y+11	; 0x0b
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	40 e8       	ldi	r20, 0x80	; 128
     556:	5f e3       	ldi	r21, 0x3F	; 63
     558:	0e 94 3a 09 	call	0x1274	; 0x1274 <__ltsf2>
     55c:	88 23       	and	r24, r24
     55e:	2c f4       	brge	.+10     	; 0x56a <lcd_initialization+0x4c4>
		__ticks = 1;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	9f 83       	std	Y+7, r25	; 0x07
     566:	8e 83       	std	Y+6, r24	; 0x06
     568:	3f c0       	rjmp	.+126    	; 0x5e8 <lcd_initialization+0x542>
	else if (__tmp > 65535)
     56a:	68 85       	ldd	r22, Y+8	; 0x08
     56c:	79 85       	ldd	r23, Y+9	; 0x09
     56e:	8a 85       	ldd	r24, Y+10	; 0x0a
     570:	9b 85       	ldd	r25, Y+11	; 0x0b
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	3f ef       	ldi	r19, 0xFF	; 255
     576:	4f e7       	ldi	r20, 0x7F	; 127
     578:	57 e4       	ldi	r21, 0x47	; 71
     57a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__gtsf2>
     57e:	18 16       	cp	r1, r24
     580:	4c f5       	brge	.+82     	; 0x5d4 <lcd_initialization+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     582:	6c 85       	ldd	r22, Y+12	; 0x0c
     584:	7d 85       	ldd	r23, Y+13	; 0x0d
     586:	8e 85       	ldd	r24, Y+14	; 0x0e
     588:	9f 85       	ldd	r25, Y+15	; 0x0f
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	40 e2       	ldi	r20, 0x20	; 32
     590:	51 e4       	ldi	r21, 0x41	; 65
     592:	0e 94 34 07 	call	0xe68	; 0xe68 <__mulsf3>
     596:	dc 01       	movw	r26, r24
     598:	cb 01       	movw	r24, r22
     59a:	bc 01       	movw	r22, r24
     59c:	cd 01       	movw	r24, r26
     59e:	0e 94 5e 05 	call	0xabc	; 0xabc <__fixunssfsi>
     5a2:	dc 01       	movw	r26, r24
     5a4:	cb 01       	movw	r24, r22
     5a6:	9f 83       	std	Y+7, r25	; 0x07
     5a8:	8e 83       	std	Y+6, r24	; 0x06
     5aa:	0f c0       	rjmp	.+30     	; 0x5ca <lcd_initialization+0x524>
     5ac:	80 e9       	ldi	r24, 0x90	; 144
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	9d 83       	std	Y+5, r25	; 0x05
     5b2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5b4:	8c 81       	ldd	r24, Y+4	; 0x04
     5b6:	9d 81       	ldd	r25, Y+5	; 0x05
     5b8:	01 97       	sbiw	r24, 0x01	; 1
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <lcd_initialization+0x512>
     5bc:	9d 83       	std	Y+5, r25	; 0x05
     5be:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c0:	8e 81       	ldd	r24, Y+6	; 0x06
     5c2:	9f 81       	ldd	r25, Y+7	; 0x07
     5c4:	01 97       	sbiw	r24, 0x01	; 1
     5c6:	9f 83       	std	Y+7, r25	; 0x07
     5c8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ca:	8e 81       	ldd	r24, Y+6	; 0x06
     5cc:	9f 81       	ldd	r25, Y+7	; 0x07
     5ce:	00 97       	sbiw	r24, 0x00	; 0
     5d0:	69 f7       	brne	.-38     	; 0x5ac <lcd_initialization+0x506>
     5d2:	24 c0       	rjmp	.+72     	; 0x61c <lcd_initialization+0x576>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5d4:	68 85       	ldd	r22, Y+8	; 0x08
     5d6:	79 85       	ldd	r23, Y+9	; 0x09
     5d8:	8a 85       	ldd	r24, Y+10	; 0x0a
     5da:	9b 85       	ldd	r25, Y+11	; 0x0b
     5dc:	0e 94 5e 05 	call	0xabc	; 0xabc <__fixunssfsi>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	9f 83       	std	Y+7, r25	; 0x07
     5e6:	8e 83       	std	Y+6, r24	; 0x06
     5e8:	8e 81       	ldd	r24, Y+6	; 0x06
     5ea:	9f 81       	ldd	r25, Y+7	; 0x07
     5ec:	9b 83       	std	Y+3, r25	; 0x03
     5ee:	8a 83       	std	Y+2, r24	; 0x02
     5f0:	8a 81       	ldd	r24, Y+2	; 0x02
     5f2:	9b 81       	ldd	r25, Y+3	; 0x03
     5f4:	01 97       	sbiw	r24, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <lcd_initialization+0x54e>
     5f8:	9b 83       	std	Y+3, r25	; 0x03
     5fa:	8a 83       	std	Y+2, r24	; 0x02
     5fc:	0f c0       	rjmp	.+30     	; 0x61c <lcd_initialization+0x576>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     5fe:	69 89       	ldd	r22, Y+17	; 0x11
     600:	7a 89       	ldd	r23, Y+18	; 0x12
     602:	8b 89       	ldd	r24, Y+19	; 0x13
     604:	9c 89       	ldd	r25, Y+20	; 0x14
     606:	0e 94 5e 05 	call	0xabc	; 0xabc <__fixunssfsi>
     60a:	dc 01       	movw	r26, r24
     60c:	cb 01       	movw	r24, r22
     60e:	88 8b       	std	Y+16, r24	; 0x10
     610:	88 89       	ldd	r24, Y+16	; 0x10
     612:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	8a 95       	dec	r24
     618:	f1 f7       	brne	.-4      	; 0x616 <lcd_initialization+0x570>
     61a:	89 83       	std	Y+1, r24	; 0x01
_delay_us(50);
}
     61c:	c4 5b       	subi	r28, 0xB4	; 180
     61e:	df 4f       	sbci	r29, 0xFF	; 255
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	cf 91       	pop	r28
     62c:	df 91       	pop	r29
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	08 95       	ret

00000634 <STRING>:
void STRING(char *INPUT)
{
     634:	df 93       	push	r29
     636:	cf 93       	push	r28
     638:	00 d0       	rcall	.+0      	; 0x63a <STRING+0x6>
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	9a 83       	std	Y+2, r25	; 0x02
     640:	89 83       	std	Y+1, r24	; 0x01
     642:	0c c0       	rjmp	.+24     	; 0x65c <STRING+0x28>
    while(*INPUT!='\0')
        TEXT(*INPUT++);      // SLCING CHARACTER BY CHARACTER AND SENDING TO TEXT
     644:	e9 81       	ldd	r30, Y+1	; 0x01
     646:	fa 81       	ldd	r31, Y+2	; 0x02
     648:	80 81       	ld	r24, Z
     64a:	28 2f       	mov	r18, r24
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	9a 81       	ldd	r25, Y+2	; 0x02
     650:	01 96       	adiw	r24, 0x01	; 1
     652:	9a 83       	std	Y+2, r25	; 0x02
     654:	89 83       	std	Y+1, r24	; 0x01
     656:	82 2f       	mov	r24, r18
     658:	0e 94 8f 03 	call	0x71e	; 0x71e <TEXT>
CURSOUR(0b00001110); // display on cursor on 0x0E
_delay_us(50);
}
void STRING(char *INPUT)
{
    while(*INPUT!='\0')
     65c:	e9 81       	ldd	r30, Y+1	; 0x01
     65e:	fa 81       	ldd	r31, Y+2	; 0x02
     660:	80 81       	ld	r24, Z
     662:	88 23       	and	r24, r24
     664:	79 f7       	brne	.-34     	; 0x644 <STRING+0x10>
        TEXT(*INPUT++);      // SLCING CHARACTER BY CHARACTER AND SENDING TO TEXT
}
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	cf 91       	pop	r28
     66c:	df 91       	pop	r29
     66e:	08 95       	ret

00000670 <ROUTINE>:
void ROUTINE()
{
     670:	df 93       	push	r29
     672:	cf 93       	push	r28
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
LCD_CONTROL  |=1<<ENABLE;
     678:	a5 e2       	ldi	r26, 0x25	; 37
     67a:	b0 e0       	ldi	r27, 0x00	; 0
     67c:	e5 e2       	ldi	r30, 0x25	; 37
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	80 81       	ld	r24, Z
     682:	84 60       	ori	r24, 0x04	; 4
     684:	8c 93       	st	X, r24
asm volatile("nop");
     686:	00 00       	nop
asm volatile("nop");
     688:	00 00       	nop
LCD_CONTROL &=~(1<<ENABLE);
     68a:	a5 e2       	ldi	r26, 0x25	; 37
     68c:	b0 e0       	ldi	r27, 0x00	; 0
     68e:	e5 e2       	ldi	r30, 0x25	; 37
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	80 81       	ld	r24, Z
     694:	8b 7f       	andi	r24, 0xFB	; 251
     696:	8c 93       	st	X, r24
}
     698:	cf 91       	pop	r28
     69a:	df 91       	pop	r29
     69c:	08 95       	ret

0000069e <BUSYCHECK>:

void BUSYCHECK()      //CHECK LCD DISPLAY IS BUSY OR NOT
{
     69e:	df 93       	push	r29
     6a0:	cf 93       	push	r28
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
PIN_DDR =0;
     6a6:	ea e2       	ldi	r30, 0x2A	; 42
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	10 82       	st	Z, r1
LCD_CONTROL |=1<<READ_WRITE;
     6ac:	a5 e2       	ldi	r26, 0x25	; 37
     6ae:	b0 e0       	ldi	r27, 0x00	; 0
     6b0:	e5 e2       	ldi	r30, 0x25	; 37
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	82 60       	ori	r24, 0x02	; 2
     6b8:	8c 93       	st	X, r24
LCD_CONTROL &=~(1<<REGISTR_SEL);
     6ba:	a5 e2       	ldi	r26, 0x25	; 37
     6bc:	b0 e0       	ldi	r27, 0x00	; 0
     6be:	e5 e2       	ldi	r30, 0x25	; 37
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	80 81       	ld	r24, Z
     6c4:	87 7f       	andi	r24, 0xF7	; 247
     6c6:	8c 93       	st	X, r24
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <BUSYCHECK+0x30>
while(LCD_PIN>=0x80)
{
    ROUTINE();
     6ca:	0e 94 38 03 	call	0x670	; 0x670 <ROUTINE>
void BUSYCHECK()      //CHECK LCD DISPLAY IS BUSY OR NOT
{
PIN_DDR =0;
LCD_CONTROL |=1<<READ_WRITE;
LCD_CONTROL &=~(1<<REGISTR_SEL);
while(LCD_PIN>=0x80)
     6ce:	eb e2       	ldi	r30, 0x2B	; 43
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	80 81       	ld	r24, Z
     6d4:	88 23       	and	r24, r24
     6d6:	cc f3       	brlt	.-14     	; 0x6ca <BUSYCHECK+0x2c>
{
    ROUTINE();
}
PIN_DDR =0xFF;
     6d8:	ea e2       	ldi	r30, 0x2A	; 42
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	8f ef       	ldi	r24, 0xFF	; 255
     6de:	80 83       	st	Z, r24
}
     6e0:	cf 91       	pop	r28
     6e2:	df 91       	pop	r29
     6e4:	08 95       	ret

000006e6 <CURSOUR>:

void CURSOUR(unsigned char INPUT)
{
     6e6:	df 93       	push	r29
     6e8:	cf 93       	push	r28
     6ea:	0f 92       	push	r0
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	89 83       	std	Y+1, r24	; 0x01
BUSYCHECK();
     6f2:	0e 94 4f 03 	call	0x69e	; 0x69e <BUSYCHECK>
LCD_PIN=INPUT;
     6f6:	eb e2       	ldi	r30, 0x2B	; 43
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	80 83       	st	Z, r24
LCD_CONTROL &=~(1<<READ_WRITE | 1<<REGISTR_SEL);
     6fe:	a5 e2       	ldi	r26, 0x25	; 37
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	e5 e2       	ldi	r30, 0x25	; 37
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	80 81       	ld	r24, Z
     708:	85 7f       	andi	r24, 0xF5	; 245
     70a:	8c 93       	st	X, r24
ROUTINE();
     70c:	0e 94 38 03 	call	0x670	; 0x670 <ROUTINE>
LCD_PIN=0;
     710:	eb e2       	ldi	r30, 0x2B	; 43
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	10 82       	st	Z, r1
}
     716:	0f 90       	pop	r0
     718:	cf 91       	pop	r28
     71a:	df 91       	pop	r29
     71c:	08 95       	ret

0000071e <TEXT>:

void TEXT(unsigned char INPUT)
{
     71e:	df 93       	push	r29
     720:	cf 93       	push	r28
     722:	0f 92       	push	r0
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	89 83       	std	Y+1, r24	; 0x01
    BUSYCHECK();
     72a:	0e 94 4f 03 	call	0x69e	; 0x69e <BUSYCHECK>
    LCD_PIN=INPUT;
     72e:	eb e2       	ldi	r30, 0x2B	; 43
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	80 83       	st	Z, r24
    LCD_CONTROL &=~(1<<READ_WRITE);
     736:	a5 e2       	ldi	r26, 0x25	; 37
     738:	b0 e0       	ldi	r27, 0x00	; 0
     73a:	e5 e2       	ldi	r30, 0x25	; 37
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	80 81       	ld	r24, Z
     740:	8d 7f       	andi	r24, 0xFD	; 253
     742:	8c 93       	st	X, r24
    LCD_CONTROL |=1<<REGISTR_SEL ;
     744:	a5 e2       	ldi	r26, 0x25	; 37
     746:	b0 e0       	ldi	r27, 0x00	; 0
     748:	e5 e2       	ldi	r30, 0x25	; 37
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	80 81       	ld	r24, Z
     74e:	88 60       	ori	r24, 0x08	; 8
     750:	8c 93       	st	X, r24
    ROUTINE();
     752:	0e 94 38 03 	call	0x670	; 0x670 <ROUTINE>
    LCD_PIN=0;
     756:	eb e2       	ldi	r30, 0x2B	; 43
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	10 82       	st	Z, r1
}
     75c:	0f 90       	pop	r0
     75e:	cf 91       	pop	r28
     760:	df 91       	pop	r29
     762:	08 95       	ret

00000764 <GOTO>:
    STRING(str);
    _delay_ms(200);
    CURSOUR(0x80+(i+row[j]));
    STRING(" ");
    }*/
void GOTO(int ROW,int COL){
     764:	df 93       	push	r29
     766:	cf 93       	push	r28
     768:	00 d0       	rcall	.+0      	; 0x76a <GOTO+0x6>
     76a:	00 d0       	rcall	.+0      	; 0x76c <GOTO+0x8>
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	9a 83       	std	Y+2, r25	; 0x02
     772:	89 83       	std	Y+1, r24	; 0x01
     774:	7c 83       	std	Y+4, r23	; 0x04
     776:	6b 83       	std	Y+3, r22	; 0x03
CURSOUR(0x80+row_lcd[ROW]+COL);}
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	9a 81       	ldd	r25, Y+2	; 0x02
     77c:	88 0f       	add	r24, r24
     77e:	99 1f       	adc	r25, r25
     780:	fc 01       	movw	r30, r24
     782:	e0 50       	subi	r30, 0x00	; 0
     784:	ff 4f       	sbci	r31, 0xFF	; 255
     786:	80 81       	ld	r24, Z
     788:	91 81       	ldd	r25, Z+1	; 0x01
     78a:	98 2f       	mov	r25, r24
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	89 0f       	add	r24, r25
     790:	80 58       	subi	r24, 0x80	; 128
     792:	0e 94 73 03 	call	0x6e6	; 0x6e6 <CURSOUR>
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	cf 91       	pop	r28
     7a0:	df 91       	pop	r29
     7a2:	08 95       	ret

000007a4 <POSITION>:

void POSITION(int row, int col,int data,int data_size){
     7a4:	df 93       	push	r29
     7a6:	cf 93       	push	r28
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
     7ac:	60 97       	sbiw	r28, 0x10	; 16
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	9c 83       	std	Y+4, r25	; 0x04
     7ba:	8b 83       	std	Y+3, r24	; 0x03
     7bc:	7e 83       	std	Y+6, r23	; 0x06
     7be:	6d 83       	std	Y+5, r22	; 0x05
     7c0:	58 87       	std	Y+8, r21	; 0x08
     7c2:	4f 83       	std	Y+7, r20	; 0x07
     7c4:	3a 87       	std	Y+10, r19	; 0x0a
     7c6:	29 87       	std	Y+9, r18	; 0x09
for (i=0;i<data_size;i++) // allocate space for data to be display
    STRING(" ");
CURSOUR(0x80+row_lcd[row]+col);
STRING(str);

}
     7c8:	2d b7       	in	r18, 0x3d	; 61
     7ca:	3e b7       	in	r19, 0x3e	; 62
     7cc:	38 8b       	std	Y+16, r19	; 0x10
     7ce:	2f 87       	std	Y+15, r18	; 0x0f
    STRING(" ");
    }*/
void GOTO(int ROW,int COL){
CURSOUR(0x80+row_lcd[ROW]+COL);}

void POSITION(int row, int col,int data,int data_size){
     7d0:	8d b7       	in	r24, 0x3d	; 61
     7d2:	9e b7       	in	r25, 0x3e	; 62
     7d4:	9c 87       	std	Y+12, r25	; 0x0c
     7d6:	8b 87       	std	Y+11, r24	; 0x0b
char str [data_size];
     7d8:	89 85       	ldd	r24, Y+9	; 0x09
     7da:	9a 85       	ldd	r25, Y+10	; 0x0a
     7dc:	2d b7       	in	r18, 0x3d	; 61
     7de:	3e b7       	in	r19, 0x3e	; 62
     7e0:	28 1b       	sub	r18, r24
     7e2:	39 0b       	sbc	r19, r25
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	f8 94       	cli
     7e8:	3e bf       	out	0x3e, r19	; 62
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	2d bf       	out	0x3d, r18	; 61
     7ee:	8d b7       	in	r24, 0x3d	; 61
     7f0:	9e b7       	in	r25, 0x3e	; 62
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	9e 87       	std	Y+14, r25	; 0x0e
     7f6:	8d 87       	std	Y+13, r24	; 0x0d
     7f8:	8d 85       	ldd	r24, Y+13	; 0x0d
     7fa:	9e 85       	ldd	r25, Y+14	; 0x0e
     7fc:	00 96       	adiw	r24, 0x00	; 0
     7fe:	9e 87       	std	Y+14, r25	; 0x0e
     800:	8d 87       	std	Y+13, r24	; 0x0d
     802:	2d 85       	ldd	r18, Y+13	; 0x0d
     804:	3e 85       	ldd	r19, Y+14	; 0x0e
     806:	3a 83       	std	Y+2, r19	; 0x02
     808:	29 83       	std	Y+1, r18	; 0x01
itoa(data,str,10);
     80a:	29 81       	ldd	r18, Y+1	; 0x01
     80c:	3a 81       	ldd	r19, Y+2	; 0x02
     80e:	8f 81       	ldd	r24, Y+7	; 0x07
     810:	98 85       	ldd	r25, Y+8	; 0x08
     812:	b9 01       	movw	r22, r18
     814:	4a e0       	ldi	r20, 0x0A	; 10
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	0e 94 9b 0b 	call	0x1736	; 0x1736 <itoa>
for (i=0;i<data_size;i++) // allocate space for data to be display
     81c:	10 92 13 01 	sts	0x0113, r1
     820:	10 92 12 01 	sts	0x0112, r1
     824:	0d c0       	rjmp	.+26     	; 0x840 <POSITION+0x9c>
    STRING(" ");
     826:	88 e0       	ldi	r24, 0x08	; 8
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	0e 94 1a 03 	call	0x634	; 0x634 <STRING>
CURSOUR(0x80+row_lcd[ROW]+COL);}

void POSITION(int row, int col,int data,int data_size){
char str [data_size];
itoa(data,str,10);
for (i=0;i<data_size;i++) // allocate space for data to be display
     82e:	80 91 12 01 	lds	r24, 0x0112
     832:	90 91 13 01 	lds	r25, 0x0113
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	90 93 13 01 	sts	0x0113, r25
     83c:	80 93 12 01 	sts	0x0112, r24
     840:	20 91 12 01 	lds	r18, 0x0112
     844:	30 91 13 01 	lds	r19, 0x0113
     848:	89 85       	ldd	r24, Y+9	; 0x09
     84a:	9a 85       	ldd	r25, Y+10	; 0x0a
     84c:	28 17       	cp	r18, r24
     84e:	39 07       	cpc	r19, r25
     850:	54 f3       	brlt	.-44     	; 0x826 <POSITION+0x82>
    STRING(" ");
CURSOUR(0x80+row_lcd[row]+col);
     852:	8b 81       	ldd	r24, Y+3	; 0x03
     854:	9c 81       	ldd	r25, Y+4	; 0x04
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	fc 01       	movw	r30, r24
     85c:	e0 50       	subi	r30, 0x00	; 0
     85e:	ff 4f       	sbci	r31, 0xFF	; 255
     860:	80 81       	ld	r24, Z
     862:	91 81       	ldd	r25, Z+1	; 0x01
     864:	98 2f       	mov	r25, r24
     866:	8d 81       	ldd	r24, Y+5	; 0x05
     868:	89 0f       	add	r24, r25
     86a:	80 58       	subi	r24, 0x80	; 128
     86c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <CURSOUR>
STRING(str);
     870:	89 81       	ldd	r24, Y+1	; 0x01
     872:	9a 81       	ldd	r25, Y+2	; 0x02
     874:	0e 94 1a 03 	call	0x634	; 0x634 <STRING>
     878:	8b 85       	ldd	r24, Y+11	; 0x0b
     87a:	9c 85       	ldd	r25, Y+12	; 0x0c
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	9e bf       	out	0x3e, r25	; 62
     882:	0f be       	out	0x3f, r0	; 63
     884:	8d bf       	out	0x3d, r24	; 61

}
     886:	2f 85       	ldd	r18, Y+15	; 0x0f
     888:	38 89       	ldd	r19, Y+16	; 0x10
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	3e bf       	out	0x3e, r19	; 62
     890:	0f be       	out	0x3f, r0	; 63
     892:	2d bf       	out	0x3d, r18	; 61
     894:	60 96       	adiw	r28, 0x10	; 16
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	de bf       	out	0x3e, r29	; 62
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	cd bf       	out	0x3d, r28	; 61
     8a0:	cf 91       	pop	r28
     8a2:	df 91       	pop	r29
     8a4:	08 95       	ret

000008a6 <length>:
int length(char *data){
     8a6:	df 93       	push	r29
     8a8:	cf 93       	push	r28
     8aa:	00 d0       	rcall	.+0      	; 0x8ac <length+0x6>
     8ac:	00 d0       	rcall	.+0      	; 0x8ae <length+0x8>
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62
     8b2:	9c 83       	std	Y+4, r25	; 0x04
     8b4:	8b 83       	std	Y+3, r24	; 0x03
    int len=0;
     8b6:	1a 82       	std	Y+2, r1	; 0x02
     8b8:	19 82       	std	Y+1, r1	; 0x01
     8ba:	0a c0       	rjmp	.+20     	; 0x8d0 <length+0x2a>
while(*data!='\0')
{
    len++;*data++;
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	9a 81       	ldd	r25, Y+2	; 0x02
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	9a 83       	std	Y+2, r25	; 0x02
     8c4:	89 83       	std	Y+1, r24	; 0x01
     8c6:	8b 81       	ldd	r24, Y+3	; 0x03
     8c8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ca:	01 96       	adiw	r24, 0x01	; 1
     8cc:	9c 83       	std	Y+4, r25	; 0x04
     8ce:	8b 83       	std	Y+3, r24	; 0x03
STRING(str);

}
int length(char *data){
    int len=0;
while(*data!='\0')
     8d0:	eb 81       	ldd	r30, Y+3	; 0x03
     8d2:	fc 81       	ldd	r31, Y+4	; 0x04
     8d4:	80 81       	ld	r24, Z
     8d6:	88 23       	and	r24, r24
     8d8:	89 f7       	brne	.-30     	; 0x8bc <length+0x16>
{
    len++;*data++;

}
return len;
     8da:	89 81       	ldd	r24, Y+1	; 0x01
     8dc:	9a 81       	ldd	r25, Y+2	; 0x02
}
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	cf 91       	pop	r28
     8e8:	df 91       	pop	r29
     8ea:	08 95       	ret

000008ec <main>:
#include <avr/io.h>
#include "lcd.h"
#include <avr/delay.h>
#include <avr/interrupt.h>
int main(void)
{
     8ec:	df 93       	push	r29
     8ee:	cf 93       	push	r28
     8f0:	cd b7       	in	r28, 0x3d	; 61
     8f2:	de b7       	in	r29, 0x3e	; 62

    // Insert code
lcd_initialization();
     8f4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_initialization>
ADCSRA |=1<<ADPS2; //PRESCALLER
     8f8:	aa e7       	ldi	r26, 0x7A	; 122
     8fa:	b0 e0       	ldi	r27, 0x00	; 0
     8fc:	ea e7       	ldi	r30, 0x7A	; 122
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	80 81       	ld	r24, Z
     902:	84 60       	ori	r24, 0x04	; 4
     904:	8c 93       	st	X, r24
ADCSRA |=1<<ADIE;
     906:	aa e7       	ldi	r26, 0x7A	; 122
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	ea e7       	ldi	r30, 0x7A	; 122
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	88 60       	ori	r24, 0x08	; 8
     912:	8c 93       	st	X, r24
ADCSRA |=1<<ADEN;
     914:	aa e7       	ldi	r26, 0x7A	; 122
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	ea e7       	ldi	r30, 0x7A	; 122
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	80 68       	ori	r24, 0x80	; 128
     920:	8c 93       	st	X, r24
sei();
     922:	78 94       	sei
ADCSRA |=1<<ADSC;
     924:	aa e7       	ldi	r26, 0x7A	; 122
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	ea e7       	ldi	r30, 0x7A	; 122
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	80 64       	ori	r24, 0x40	; 64
     930:	8c 93       	st	X, r24
     932:	ff cf       	rjmp	.-2      	; 0x932 <__stack+0x33>

00000934 <__vector_21>:

    }

    return 0;
}
ISR(ADC_vect){
     934:	1f 92       	push	r1
     936:	0f 92       	push	r0
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	0f 92       	push	r0
     93c:	11 24       	eor	r1, r1
     93e:	2f 93       	push	r18
     940:	3f 93       	push	r19
     942:	4f 93       	push	r20
     944:	5f 93       	push	r21
     946:	6f 93       	push	r22
     948:	7f 93       	push	r23
     94a:	8f 93       	push	r24
     94c:	9f 93       	push	r25
     94e:	af 93       	push	r26
     950:	bf 93       	push	r27
     952:	ef 93       	push	r30
     954:	ff 93       	push	r31
     956:	df 93       	push	r29
     958:	cf 93       	push	r28
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	61 97       	sbiw	r28, 0x11	; 17
     960:	de bf       	out	0x3e, r29	; 62
     962:	cd bf       	out	0x3d, r28	; 61
uint8_t adcl = ADCL;
     964:	e8 e7       	ldi	r30, 0x78	; 120
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 81       	ld	r24, Z
     96a:	89 8b       	std	Y+17, r24	; 0x11
uint16_t TENBIT =ADCH<<8 | adcl;
     96c:	e9 e7       	ldi	r30, 0x79	; 121
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	80 81       	ld	r24, Z
     972:	88 2f       	mov	r24, r24
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	38 2f       	mov	r19, r24
     978:	22 27       	eor	r18, r18
     97a:	89 89       	ldd	r24, Y+17	; 0x11
     97c:	88 2f       	mov	r24, r24
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	82 2b       	or	r24, r18
     982:	93 2b       	or	r25, r19
     984:	98 8b       	std	Y+16, r25	; 0x10
     986:	8f 87       	std	Y+15, r24	; 0x0f
POSITION(1,1,TENBIT,5);
     988:	2f 85       	ldd	r18, Y+15	; 0x0f
     98a:	38 89       	ldd	r19, Y+16	; 0x10
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	a9 01       	movw	r20, r18
     996:	25 e0       	ldi	r18, 0x05	; 5
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <POSITION>
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	a8 ec       	ldi	r26, 0xC8	; 200
     9a4:	b2 e4       	ldi	r27, 0x42	; 66
     9a6:	8b 87       	std	Y+11, r24	; 0x0b
     9a8:	9c 87       	std	Y+12, r25	; 0x0c
     9aa:	ad 87       	std	Y+13, r26	; 0x0d
     9ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9ae:	6b 85       	ldd	r22, Y+11	; 0x0b
     9b0:	7c 85       	ldd	r23, Y+12	; 0x0c
     9b2:	8d 85       	ldd	r24, Y+13	; 0x0d
     9b4:	9e 85       	ldd	r25, Y+14	; 0x0e
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	4a e7       	ldi	r20, 0x7A	; 122
     9bc:	55 e4       	ldi	r21, 0x45	; 69
     9be:	0e 94 34 07 	call	0xe68	; 0xe68 <__mulsf3>
     9c2:	dc 01       	movw	r26, r24
     9c4:	cb 01       	movw	r24, r22
     9c6:	8f 83       	std	Y+7, r24	; 0x07
     9c8:	98 87       	std	Y+8, r25	; 0x08
     9ca:	a9 87       	std	Y+9, r26	; 0x09
     9cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     9ce:	6f 81       	ldd	r22, Y+7	; 0x07
     9d0:	78 85       	ldd	r23, Y+8	; 0x08
     9d2:	89 85       	ldd	r24, Y+9	; 0x09
     9d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e8       	ldi	r20, 0x80	; 128
     9dc:	5f e3       	ldi	r21, 0x3F	; 63
     9de:	0e 94 3a 09 	call	0x1274	; 0x1274 <__ltsf2>
     9e2:	88 23       	and	r24, r24
     9e4:	2c f4       	brge	.+10     	; 0x9f0 <__vector_21+0xbc>
		__ticks = 1;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	9e 83       	std	Y+6, r25	; 0x06
     9ec:	8d 83       	std	Y+5, r24	; 0x05
     9ee:	3f c0       	rjmp	.+126    	; 0xa6e <__vector_21+0x13a>
	else if (__tmp > 65535)
     9f0:	6f 81       	ldd	r22, Y+7	; 0x07
     9f2:	78 85       	ldd	r23, Y+8	; 0x08
     9f4:	89 85       	ldd	r24, Y+9	; 0x09
     9f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	3f ef       	ldi	r19, 0xFF	; 255
     9fc:	4f e7       	ldi	r20, 0x7F	; 127
     9fe:	57 e4       	ldi	r21, 0x47	; 71
     a00:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__gtsf2>
     a04:	18 16       	cp	r1, r24
     a06:	4c f5       	brge	.+82     	; 0xa5a <__vector_21+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a08:	6b 85       	ldd	r22, Y+11	; 0x0b
     a0a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 e2       	ldi	r20, 0x20	; 32
     a16:	51 e4       	ldi	r21, 0x41	; 65
     a18:	0e 94 34 07 	call	0xe68	; 0xe68 <__mulsf3>
     a1c:	dc 01       	movw	r26, r24
     a1e:	cb 01       	movw	r24, r22
     a20:	bc 01       	movw	r22, r24
     a22:	cd 01       	movw	r24, r26
     a24:	0e 94 5e 05 	call	0xabc	; 0xabc <__fixunssfsi>
     a28:	dc 01       	movw	r26, r24
     a2a:	cb 01       	movw	r24, r22
     a2c:	9e 83       	std	Y+6, r25	; 0x06
     a2e:	8d 83       	std	Y+5, r24	; 0x05
     a30:	0f c0       	rjmp	.+30     	; 0xa50 <__vector_21+0x11c>
     a32:	80 e9       	ldi	r24, 0x90	; 144
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	9c 83       	std	Y+4, r25	; 0x04
     a38:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a3a:	8b 81       	ldd	r24, Y+3	; 0x03
     a3c:	9c 81       	ldd	r25, Y+4	; 0x04
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	f1 f7       	brne	.-4      	; 0xa3e <__vector_21+0x10a>
     a42:	9c 83       	std	Y+4, r25	; 0x04
     a44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a46:	8d 81       	ldd	r24, Y+5	; 0x05
     a48:	9e 81       	ldd	r25, Y+6	; 0x06
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	9e 83       	std	Y+6, r25	; 0x06
     a4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a50:	8d 81       	ldd	r24, Y+5	; 0x05
     a52:	9e 81       	ldd	r25, Y+6	; 0x06
     a54:	00 97       	sbiw	r24, 0x00	; 0
     a56:	69 f7       	brne	.-38     	; 0xa32 <__vector_21+0xfe>
     a58:	14 c0       	rjmp	.+40     	; 0xa82 <__vector_21+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a5a:	6f 81       	ldd	r22, Y+7	; 0x07
     a5c:	78 85       	ldd	r23, Y+8	; 0x08
     a5e:	89 85       	ldd	r24, Y+9	; 0x09
     a60:	9a 85       	ldd	r25, Y+10	; 0x0a
     a62:	0e 94 5e 05 	call	0xabc	; 0xabc <__fixunssfsi>
     a66:	dc 01       	movw	r26, r24
     a68:	cb 01       	movw	r24, r22
     a6a:	9e 83       	std	Y+6, r25	; 0x06
     a6c:	8d 83       	std	Y+5, r24	; 0x05
     a6e:	8d 81       	ldd	r24, Y+5	; 0x05
     a70:	9e 81       	ldd	r25, Y+6	; 0x06
     a72:	9a 83       	std	Y+2, r25	; 0x02
     a74:	89 83       	std	Y+1, r24	; 0x01
     a76:	89 81       	ldd	r24, Y+1	; 0x01
     a78:	9a 81       	ldd	r25, Y+2	; 0x02
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	f1 f7       	brne	.-4      	; 0xa7a <__vector_21+0x146>
     a7e:	9a 83       	std	Y+2, r25	; 0x02
     a80:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(100);
ADCSRA |=1<<ADSC;
     a82:	aa e7       	ldi	r26, 0x7A	; 122
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	ea e7       	ldi	r30, 0x7A	; 122
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	80 64       	ori	r24, 0x40	; 64
     a8e:	8c 93       	st	X, r24
}
     a90:	61 96       	adiw	r28, 0x11	; 17
     a92:	de bf       	out	0x3e, r29	; 62
     a94:	cd bf       	out	0x3d, r28	; 61
     a96:	cf 91       	pop	r28
     a98:	df 91       	pop	r29
     a9a:	ff 91       	pop	r31
     a9c:	ef 91       	pop	r30
     a9e:	bf 91       	pop	r27
     aa0:	af 91       	pop	r26
     aa2:	9f 91       	pop	r25
     aa4:	8f 91       	pop	r24
     aa6:	7f 91       	pop	r23
     aa8:	6f 91       	pop	r22
     aaa:	5f 91       	pop	r21
     aac:	4f 91       	pop	r20
     aae:	3f 91       	pop	r19
     ab0:	2f 91       	pop	r18
     ab2:	0f 90       	pop	r0
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	0f 90       	pop	r0
     ab8:	1f 90       	pop	r1
     aba:	18 95       	reti

00000abc <__fixunssfsi>:
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	7b 01       	movw	r14, r22
     ac6:	8c 01       	movw	r16, r24
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	5f e4       	ldi	r21, 0x4F	; 79
     ad0:	0e 94 0a 09 	call	0x1214	; 0x1214 <__gesf2>
     ad4:	88 23       	and	r24, r24
     ad6:	8c f0       	brlt	.+34     	; 0xafa <__fixunssfsi+0x3e>
     ad8:	c8 01       	movw	r24, r16
     ada:	b7 01       	movw	r22, r14
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	40 e0       	ldi	r20, 0x00	; 0
     ae2:	5f e4       	ldi	r21, 0x4F	; 79
     ae4:	0e 94 d6 06 	call	0xdac	; 0xdac <__subsf3>
     ae8:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__fixsfsi>
     aec:	9b 01       	movw	r18, r22
     aee:	ac 01       	movw	r20, r24
     af0:	20 50       	subi	r18, 0x00	; 0
     af2:	30 40       	sbci	r19, 0x00	; 0
     af4:	40 40       	sbci	r20, 0x00	; 0
     af6:	50 48       	sbci	r21, 0x80	; 128
     af8:	06 c0       	rjmp	.+12     	; 0xb06 <__fixunssfsi+0x4a>
     afa:	c8 01       	movw	r24, r16
     afc:	b7 01       	movw	r22, r14
     afe:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__fixsfsi>
     b02:	9b 01       	movw	r18, r22
     b04:	ac 01       	movw	r20, r24
     b06:	b9 01       	movw	r22, r18
     b08:	ca 01       	movw	r24, r20
     b0a:	1f 91       	pop	r17
     b0c:	0f 91       	pop	r16
     b0e:	ff 90       	pop	r15
     b10:	ef 90       	pop	r14
     b12:	08 95       	ret

00000b14 <_fpadd_parts>:
     b14:	a0 e0       	ldi	r26, 0x00	; 0
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	e0 e9       	ldi	r30, 0x90	; 144
     b1a:	f5 e0       	ldi	r31, 0x05	; 5
     b1c:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__prologue_saves__>
     b20:	dc 01       	movw	r26, r24
     b22:	2b 01       	movw	r4, r22
     b24:	fa 01       	movw	r30, r20
     b26:	9c 91       	ld	r25, X
     b28:	92 30       	cpi	r25, 0x02	; 2
     b2a:	08 f4       	brcc	.+2      	; 0xb2e <_fpadd_parts+0x1a>
     b2c:	39 c1       	rjmp	.+626    	; 0xda0 <_fpadd_parts+0x28c>
     b2e:	eb 01       	movw	r28, r22
     b30:	88 81       	ld	r24, Y
     b32:	82 30       	cpi	r24, 0x02	; 2
     b34:	08 f4       	brcc	.+2      	; 0xb38 <_fpadd_parts+0x24>
     b36:	33 c1       	rjmp	.+614    	; 0xd9e <_fpadd_parts+0x28a>
     b38:	94 30       	cpi	r25, 0x04	; 4
     b3a:	69 f4       	brne	.+26     	; 0xb56 <_fpadd_parts+0x42>
     b3c:	84 30       	cpi	r24, 0x04	; 4
     b3e:	09 f0       	breq	.+2      	; 0xb42 <_fpadd_parts+0x2e>
     b40:	2f c1       	rjmp	.+606    	; 0xda0 <_fpadd_parts+0x28c>
     b42:	11 96       	adiw	r26, 0x01	; 1
     b44:	9c 91       	ld	r25, X
     b46:	11 97       	sbiw	r26, 0x01	; 1
     b48:	89 81       	ldd	r24, Y+1	; 0x01
     b4a:	98 17       	cp	r25, r24
     b4c:	09 f4       	brne	.+2      	; 0xb50 <_fpadd_parts+0x3c>
     b4e:	28 c1       	rjmp	.+592    	; 0xda0 <_fpadd_parts+0x28c>
     b50:	aa e0       	ldi	r26, 0x0A	; 10
     b52:	b1 e0       	ldi	r27, 0x01	; 1
     b54:	25 c1       	rjmp	.+586    	; 0xda0 <_fpadd_parts+0x28c>
     b56:	84 30       	cpi	r24, 0x04	; 4
     b58:	09 f4       	brne	.+2      	; 0xb5c <_fpadd_parts+0x48>
     b5a:	21 c1       	rjmp	.+578    	; 0xd9e <_fpadd_parts+0x28a>
     b5c:	82 30       	cpi	r24, 0x02	; 2
     b5e:	a9 f4       	brne	.+42     	; 0xb8a <_fpadd_parts+0x76>
     b60:	92 30       	cpi	r25, 0x02	; 2
     b62:	09 f0       	breq	.+2      	; 0xb66 <_fpadd_parts+0x52>
     b64:	1d c1       	rjmp	.+570    	; 0xda0 <_fpadd_parts+0x28c>
     b66:	9a 01       	movw	r18, r20
     b68:	ad 01       	movw	r20, r26
     b6a:	88 e0       	ldi	r24, 0x08	; 8
     b6c:	ea 01       	movw	r28, r20
     b6e:	09 90       	ld	r0, Y+
     b70:	ae 01       	movw	r20, r28
     b72:	e9 01       	movw	r28, r18
     b74:	09 92       	st	Y+, r0
     b76:	9e 01       	movw	r18, r28
     b78:	81 50       	subi	r24, 0x01	; 1
     b7a:	c1 f7       	brne	.-16     	; 0xb6c <_fpadd_parts+0x58>
     b7c:	e2 01       	movw	r28, r4
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	11 96       	adiw	r26, 0x01	; 1
     b82:	9c 91       	ld	r25, X
     b84:	89 23       	and	r24, r25
     b86:	81 83       	std	Z+1, r24	; 0x01
     b88:	08 c1       	rjmp	.+528    	; 0xd9a <_fpadd_parts+0x286>
     b8a:	92 30       	cpi	r25, 0x02	; 2
     b8c:	09 f4       	brne	.+2      	; 0xb90 <_fpadd_parts+0x7c>
     b8e:	07 c1       	rjmp	.+526    	; 0xd9e <_fpadd_parts+0x28a>
     b90:	12 96       	adiw	r26, 0x02	; 2
     b92:	2d 90       	ld	r2, X+
     b94:	3c 90       	ld	r3, X
     b96:	13 97       	sbiw	r26, 0x03	; 3
     b98:	eb 01       	movw	r28, r22
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	9b 81       	ldd	r25, Y+3	; 0x03
     b9e:	14 96       	adiw	r26, 0x04	; 4
     ba0:	ad 90       	ld	r10, X+
     ba2:	bd 90       	ld	r11, X+
     ba4:	cd 90       	ld	r12, X+
     ba6:	dc 90       	ld	r13, X
     ba8:	17 97       	sbiw	r26, 0x07	; 7
     baa:	ec 80       	ldd	r14, Y+4	; 0x04
     bac:	fd 80       	ldd	r15, Y+5	; 0x05
     bae:	0e 81       	ldd	r16, Y+6	; 0x06
     bb0:	1f 81       	ldd	r17, Y+7	; 0x07
     bb2:	91 01       	movw	r18, r2
     bb4:	28 1b       	sub	r18, r24
     bb6:	39 0b       	sbc	r19, r25
     bb8:	b9 01       	movw	r22, r18
     bba:	37 ff       	sbrs	r19, 7
     bbc:	04 c0       	rjmp	.+8      	; 0xbc6 <_fpadd_parts+0xb2>
     bbe:	66 27       	eor	r22, r22
     bc0:	77 27       	eor	r23, r23
     bc2:	62 1b       	sub	r22, r18
     bc4:	73 0b       	sbc	r23, r19
     bc6:	60 32       	cpi	r22, 0x20	; 32
     bc8:	71 05       	cpc	r23, r1
     bca:	0c f0       	brlt	.+2      	; 0xbce <_fpadd_parts+0xba>
     bcc:	61 c0       	rjmp	.+194    	; 0xc90 <_fpadd_parts+0x17c>
     bce:	12 16       	cp	r1, r18
     bd0:	13 06       	cpc	r1, r19
     bd2:	6c f5       	brge	.+90     	; 0xc2e <_fpadd_parts+0x11a>
     bd4:	37 01       	movw	r6, r14
     bd6:	48 01       	movw	r8, r16
     bd8:	06 2e       	mov	r0, r22
     bda:	04 c0       	rjmp	.+8      	; 0xbe4 <_fpadd_parts+0xd0>
     bdc:	96 94       	lsr	r9
     bde:	87 94       	ror	r8
     be0:	77 94       	ror	r7
     be2:	67 94       	ror	r6
     be4:	0a 94       	dec	r0
     be6:	d2 f7       	brpl	.-12     	; 0xbdc <_fpadd_parts+0xc8>
     be8:	21 e0       	ldi	r18, 0x01	; 1
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	40 e0       	ldi	r20, 0x00	; 0
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	04 c0       	rjmp	.+8      	; 0xbfa <_fpadd_parts+0xe6>
     bf2:	22 0f       	add	r18, r18
     bf4:	33 1f       	adc	r19, r19
     bf6:	44 1f       	adc	r20, r20
     bf8:	55 1f       	adc	r21, r21
     bfa:	6a 95       	dec	r22
     bfc:	d2 f7       	brpl	.-12     	; 0xbf2 <_fpadd_parts+0xde>
     bfe:	21 50       	subi	r18, 0x01	; 1
     c00:	30 40       	sbci	r19, 0x00	; 0
     c02:	40 40       	sbci	r20, 0x00	; 0
     c04:	50 40       	sbci	r21, 0x00	; 0
     c06:	2e 21       	and	r18, r14
     c08:	3f 21       	and	r19, r15
     c0a:	40 23       	and	r20, r16
     c0c:	51 23       	and	r21, r17
     c0e:	21 15       	cp	r18, r1
     c10:	31 05       	cpc	r19, r1
     c12:	41 05       	cpc	r20, r1
     c14:	51 05       	cpc	r21, r1
     c16:	21 f0       	breq	.+8      	; 0xc20 <_fpadd_parts+0x10c>
     c18:	21 e0       	ldi	r18, 0x01	; 1
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e0       	ldi	r20, 0x00	; 0
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	79 01       	movw	r14, r18
     c22:	8a 01       	movw	r16, r20
     c24:	e6 28       	or	r14, r6
     c26:	f7 28       	or	r15, r7
     c28:	08 29       	or	r16, r8
     c2a:	19 29       	or	r17, r9
     c2c:	3c c0       	rjmp	.+120    	; 0xca6 <_fpadd_parts+0x192>
     c2e:	23 2b       	or	r18, r19
     c30:	d1 f1       	breq	.+116    	; 0xca6 <_fpadd_parts+0x192>
     c32:	26 0e       	add	r2, r22
     c34:	37 1e       	adc	r3, r23
     c36:	35 01       	movw	r6, r10
     c38:	46 01       	movw	r8, r12
     c3a:	06 2e       	mov	r0, r22
     c3c:	04 c0       	rjmp	.+8      	; 0xc46 <_fpadd_parts+0x132>
     c3e:	96 94       	lsr	r9
     c40:	87 94       	ror	r8
     c42:	77 94       	ror	r7
     c44:	67 94       	ror	r6
     c46:	0a 94       	dec	r0
     c48:	d2 f7       	brpl	.-12     	; 0xc3e <_fpadd_parts+0x12a>
     c4a:	21 e0       	ldi	r18, 0x01	; 1
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	40 e0       	ldi	r20, 0x00	; 0
     c50:	50 e0       	ldi	r21, 0x00	; 0
     c52:	04 c0       	rjmp	.+8      	; 0xc5c <_fpadd_parts+0x148>
     c54:	22 0f       	add	r18, r18
     c56:	33 1f       	adc	r19, r19
     c58:	44 1f       	adc	r20, r20
     c5a:	55 1f       	adc	r21, r21
     c5c:	6a 95       	dec	r22
     c5e:	d2 f7       	brpl	.-12     	; 0xc54 <_fpadd_parts+0x140>
     c60:	21 50       	subi	r18, 0x01	; 1
     c62:	30 40       	sbci	r19, 0x00	; 0
     c64:	40 40       	sbci	r20, 0x00	; 0
     c66:	50 40       	sbci	r21, 0x00	; 0
     c68:	2a 21       	and	r18, r10
     c6a:	3b 21       	and	r19, r11
     c6c:	4c 21       	and	r20, r12
     c6e:	5d 21       	and	r21, r13
     c70:	21 15       	cp	r18, r1
     c72:	31 05       	cpc	r19, r1
     c74:	41 05       	cpc	r20, r1
     c76:	51 05       	cpc	r21, r1
     c78:	21 f0       	breq	.+8      	; 0xc82 <_fpadd_parts+0x16e>
     c7a:	21 e0       	ldi	r18, 0x01	; 1
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	59 01       	movw	r10, r18
     c84:	6a 01       	movw	r12, r20
     c86:	a6 28       	or	r10, r6
     c88:	b7 28       	or	r11, r7
     c8a:	c8 28       	or	r12, r8
     c8c:	d9 28       	or	r13, r9
     c8e:	0b c0       	rjmp	.+22     	; 0xca6 <_fpadd_parts+0x192>
     c90:	82 15       	cp	r24, r2
     c92:	93 05       	cpc	r25, r3
     c94:	2c f0       	brlt	.+10     	; 0xca0 <_fpadd_parts+0x18c>
     c96:	1c 01       	movw	r2, r24
     c98:	aa 24       	eor	r10, r10
     c9a:	bb 24       	eor	r11, r11
     c9c:	65 01       	movw	r12, r10
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <_fpadd_parts+0x192>
     ca0:	ee 24       	eor	r14, r14
     ca2:	ff 24       	eor	r15, r15
     ca4:	87 01       	movw	r16, r14
     ca6:	11 96       	adiw	r26, 0x01	; 1
     ca8:	9c 91       	ld	r25, X
     caa:	d2 01       	movw	r26, r4
     cac:	11 96       	adiw	r26, 0x01	; 1
     cae:	8c 91       	ld	r24, X
     cb0:	98 17       	cp	r25, r24
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <_fpadd_parts+0x1a2>
     cb4:	45 c0       	rjmp	.+138    	; 0xd40 <_fpadd_parts+0x22c>
     cb6:	99 23       	and	r25, r25
     cb8:	39 f0       	breq	.+14     	; 0xcc8 <_fpadd_parts+0x1b4>
     cba:	a8 01       	movw	r20, r16
     cbc:	97 01       	movw	r18, r14
     cbe:	2a 19       	sub	r18, r10
     cc0:	3b 09       	sbc	r19, r11
     cc2:	4c 09       	sbc	r20, r12
     cc4:	5d 09       	sbc	r21, r13
     cc6:	06 c0       	rjmp	.+12     	; 0xcd4 <_fpadd_parts+0x1c0>
     cc8:	a6 01       	movw	r20, r12
     cca:	95 01       	movw	r18, r10
     ccc:	2e 19       	sub	r18, r14
     cce:	3f 09       	sbc	r19, r15
     cd0:	40 0b       	sbc	r20, r16
     cd2:	51 0b       	sbc	r21, r17
     cd4:	57 fd       	sbrc	r21, 7
     cd6:	08 c0       	rjmp	.+16     	; 0xce8 <_fpadd_parts+0x1d4>
     cd8:	11 82       	std	Z+1, r1	; 0x01
     cda:	33 82       	std	Z+3, r3	; 0x03
     cdc:	22 82       	std	Z+2, r2	; 0x02
     cde:	24 83       	std	Z+4, r18	; 0x04
     ce0:	35 83       	std	Z+5, r19	; 0x05
     ce2:	46 83       	std	Z+6, r20	; 0x06
     ce4:	57 83       	std	Z+7, r21	; 0x07
     ce6:	1d c0       	rjmp	.+58     	; 0xd22 <_fpadd_parts+0x20e>
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	81 83       	std	Z+1, r24	; 0x01
     cec:	33 82       	std	Z+3, r3	; 0x03
     cee:	22 82       	std	Z+2, r2	; 0x02
     cf0:	88 27       	eor	r24, r24
     cf2:	99 27       	eor	r25, r25
     cf4:	dc 01       	movw	r26, r24
     cf6:	82 1b       	sub	r24, r18
     cf8:	93 0b       	sbc	r25, r19
     cfa:	a4 0b       	sbc	r26, r20
     cfc:	b5 0b       	sbc	r27, r21
     cfe:	84 83       	std	Z+4, r24	; 0x04
     d00:	95 83       	std	Z+5, r25	; 0x05
     d02:	a6 83       	std	Z+6, r26	; 0x06
     d04:	b7 83       	std	Z+7, r27	; 0x07
     d06:	0d c0       	rjmp	.+26     	; 0xd22 <_fpadd_parts+0x20e>
     d08:	22 0f       	add	r18, r18
     d0a:	33 1f       	adc	r19, r19
     d0c:	44 1f       	adc	r20, r20
     d0e:	55 1f       	adc	r21, r21
     d10:	24 83       	std	Z+4, r18	; 0x04
     d12:	35 83       	std	Z+5, r19	; 0x05
     d14:	46 83       	std	Z+6, r20	; 0x06
     d16:	57 83       	std	Z+7, r21	; 0x07
     d18:	82 81       	ldd	r24, Z+2	; 0x02
     d1a:	93 81       	ldd	r25, Z+3	; 0x03
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	93 83       	std	Z+3, r25	; 0x03
     d20:	82 83       	std	Z+2, r24	; 0x02
     d22:	24 81       	ldd	r18, Z+4	; 0x04
     d24:	35 81       	ldd	r19, Z+5	; 0x05
     d26:	46 81       	ldd	r20, Z+6	; 0x06
     d28:	57 81       	ldd	r21, Z+7	; 0x07
     d2a:	da 01       	movw	r26, r20
     d2c:	c9 01       	movw	r24, r18
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	a1 09       	sbc	r26, r1
     d32:	b1 09       	sbc	r27, r1
     d34:	8f 5f       	subi	r24, 0xFF	; 255
     d36:	9f 4f       	sbci	r25, 0xFF	; 255
     d38:	af 4f       	sbci	r26, 0xFF	; 255
     d3a:	bf 43       	sbci	r27, 0x3F	; 63
     d3c:	28 f3       	brcs	.-54     	; 0xd08 <_fpadd_parts+0x1f4>
     d3e:	0b c0       	rjmp	.+22     	; 0xd56 <_fpadd_parts+0x242>
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	33 82       	std	Z+3, r3	; 0x03
     d44:	22 82       	std	Z+2, r2	; 0x02
     d46:	ea 0c       	add	r14, r10
     d48:	fb 1c       	adc	r15, r11
     d4a:	0c 1d       	adc	r16, r12
     d4c:	1d 1d       	adc	r17, r13
     d4e:	e4 82       	std	Z+4, r14	; 0x04
     d50:	f5 82       	std	Z+5, r15	; 0x05
     d52:	06 83       	std	Z+6, r16	; 0x06
     d54:	17 83       	std	Z+7, r17	; 0x07
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	80 83       	st	Z, r24
     d5a:	24 81       	ldd	r18, Z+4	; 0x04
     d5c:	35 81       	ldd	r19, Z+5	; 0x05
     d5e:	46 81       	ldd	r20, Z+6	; 0x06
     d60:	57 81       	ldd	r21, Z+7	; 0x07
     d62:	57 ff       	sbrs	r21, 7
     d64:	1a c0       	rjmp	.+52     	; 0xd9a <_fpadd_parts+0x286>
     d66:	c9 01       	movw	r24, r18
     d68:	aa 27       	eor	r26, r26
     d6a:	97 fd       	sbrc	r25, 7
     d6c:	a0 95       	com	r26
     d6e:	ba 2f       	mov	r27, r26
     d70:	81 70       	andi	r24, 0x01	; 1
     d72:	90 70       	andi	r25, 0x00	; 0
     d74:	a0 70       	andi	r26, 0x00	; 0
     d76:	b0 70       	andi	r27, 0x00	; 0
     d78:	56 95       	lsr	r21
     d7a:	47 95       	ror	r20
     d7c:	37 95       	ror	r19
     d7e:	27 95       	ror	r18
     d80:	82 2b       	or	r24, r18
     d82:	93 2b       	or	r25, r19
     d84:	a4 2b       	or	r26, r20
     d86:	b5 2b       	or	r27, r21
     d88:	84 83       	std	Z+4, r24	; 0x04
     d8a:	95 83       	std	Z+5, r25	; 0x05
     d8c:	a6 83       	std	Z+6, r26	; 0x06
     d8e:	b7 83       	std	Z+7, r27	; 0x07
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	93 83       	std	Z+3, r25	; 0x03
     d98:	82 83       	std	Z+2, r24	; 0x02
     d9a:	df 01       	movw	r26, r30
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <_fpadd_parts+0x28c>
     d9e:	d2 01       	movw	r26, r4
     da0:	cd 01       	movw	r24, r26
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	e2 e1       	ldi	r30, 0x12	; 18
     da8:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__epilogue_restores__>

00000dac <__subsf3>:
     dac:	a0 e2       	ldi	r26, 0x20	; 32
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	ec ed       	ldi	r30, 0xDC	; 220
     db2:	f6 e0       	ldi	r31, 0x06	; 6
     db4:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__prologue_saves__+0x18>
     db8:	69 83       	std	Y+1, r22	; 0x01
     dba:	7a 83       	std	Y+2, r23	; 0x02
     dbc:	8b 83       	std	Y+3, r24	; 0x03
     dbe:	9c 83       	std	Y+4, r25	; 0x04
     dc0:	2d 83       	std	Y+5, r18	; 0x05
     dc2:	3e 83       	std	Y+6, r19	; 0x06
     dc4:	4f 83       	std	Y+7, r20	; 0x07
     dc6:	58 87       	std	Y+8, r21	; 0x08
     dc8:	e9 e0       	ldi	r30, 0x09	; 9
     dca:	ee 2e       	mov	r14, r30
     dcc:	f1 2c       	mov	r15, r1
     dce:	ec 0e       	add	r14, r28
     dd0:	fd 1e       	adc	r15, r29
     dd2:	ce 01       	movw	r24, r28
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	b7 01       	movw	r22, r14
     dd8:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
     ddc:	8e 01       	movw	r16, r28
     dde:	0f 5e       	subi	r16, 0xEF	; 239
     de0:	1f 4f       	sbci	r17, 0xFF	; 255
     de2:	ce 01       	movw	r24, r28
     de4:	05 96       	adiw	r24, 0x05	; 5
     de6:	b8 01       	movw	r22, r16
     de8:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
     dec:	8a 89       	ldd	r24, Y+18	; 0x12
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	89 27       	eor	r24, r25
     df2:	8a 8b       	std	Y+18, r24	; 0x12
     df4:	c7 01       	movw	r24, r14
     df6:	b8 01       	movw	r22, r16
     df8:	ae 01       	movw	r20, r28
     dfa:	47 5e       	subi	r20, 0xE7	; 231
     dfc:	5f 4f       	sbci	r21, 0xFF	; 255
     dfe:	0e 94 8a 05 	call	0xb14	; 0xb14 <_fpadd_parts>
     e02:	0e 94 be 09 	call	0x137c	; 0x137c <__pack_f>
     e06:	a0 96       	adiw	r28, 0x20	; 32
     e08:	e6 e0       	ldi	r30, 0x06	; 6
     e0a:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__epilogue_restores__+0x18>

00000e0e <__addsf3>:
     e0e:	a0 e2       	ldi	r26, 0x20	; 32
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	ed e0       	ldi	r30, 0x0D	; 13
     e14:	f7 e0       	ldi	r31, 0x07	; 7
     e16:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__prologue_saves__+0x18>
     e1a:	69 83       	std	Y+1, r22	; 0x01
     e1c:	7a 83       	std	Y+2, r23	; 0x02
     e1e:	8b 83       	std	Y+3, r24	; 0x03
     e20:	9c 83       	std	Y+4, r25	; 0x04
     e22:	2d 83       	std	Y+5, r18	; 0x05
     e24:	3e 83       	std	Y+6, r19	; 0x06
     e26:	4f 83       	std	Y+7, r20	; 0x07
     e28:	58 87       	std	Y+8, r21	; 0x08
     e2a:	f9 e0       	ldi	r31, 0x09	; 9
     e2c:	ef 2e       	mov	r14, r31
     e2e:	f1 2c       	mov	r15, r1
     e30:	ec 0e       	add	r14, r28
     e32:	fd 1e       	adc	r15, r29
     e34:	ce 01       	movw	r24, r28
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	b7 01       	movw	r22, r14
     e3a:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
     e3e:	8e 01       	movw	r16, r28
     e40:	0f 5e       	subi	r16, 0xEF	; 239
     e42:	1f 4f       	sbci	r17, 0xFF	; 255
     e44:	ce 01       	movw	r24, r28
     e46:	05 96       	adiw	r24, 0x05	; 5
     e48:	b8 01       	movw	r22, r16
     e4a:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
     e4e:	c7 01       	movw	r24, r14
     e50:	b8 01       	movw	r22, r16
     e52:	ae 01       	movw	r20, r28
     e54:	47 5e       	subi	r20, 0xE7	; 231
     e56:	5f 4f       	sbci	r21, 0xFF	; 255
     e58:	0e 94 8a 05 	call	0xb14	; 0xb14 <_fpadd_parts>
     e5c:	0e 94 be 09 	call	0x137c	; 0x137c <__pack_f>
     e60:	a0 96       	adiw	r28, 0x20	; 32
     e62:	e6 e0       	ldi	r30, 0x06	; 6
     e64:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__epilogue_restores__+0x18>

00000e68 <__mulsf3>:
     e68:	a0 e2       	ldi	r26, 0x20	; 32
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	ea e3       	ldi	r30, 0x3A	; 58
     e6e:	f7 e0       	ldi	r31, 0x07	; 7
     e70:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__prologue_saves__>
     e74:	69 83       	std	Y+1, r22	; 0x01
     e76:	7a 83       	std	Y+2, r23	; 0x02
     e78:	8b 83       	std	Y+3, r24	; 0x03
     e7a:	9c 83       	std	Y+4, r25	; 0x04
     e7c:	2d 83       	std	Y+5, r18	; 0x05
     e7e:	3e 83       	std	Y+6, r19	; 0x06
     e80:	4f 83       	std	Y+7, r20	; 0x07
     e82:	58 87       	std	Y+8, r21	; 0x08
     e84:	ce 01       	movw	r24, r28
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	be 01       	movw	r22, r28
     e8a:	67 5f       	subi	r22, 0xF7	; 247
     e8c:	7f 4f       	sbci	r23, 0xFF	; 255
     e8e:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
     e92:	ce 01       	movw	r24, r28
     e94:	05 96       	adiw	r24, 0x05	; 5
     e96:	be 01       	movw	r22, r28
     e98:	6f 5e       	subi	r22, 0xEF	; 239
     e9a:	7f 4f       	sbci	r23, 0xFF	; 255
     e9c:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
     ea0:	99 85       	ldd	r25, Y+9	; 0x09
     ea2:	92 30       	cpi	r25, 0x02	; 2
     ea4:	88 f0       	brcs	.+34     	; 0xec8 <__mulsf3+0x60>
     ea6:	89 89       	ldd	r24, Y+17	; 0x11
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	c8 f0       	brcs	.+50     	; 0xede <__mulsf3+0x76>
     eac:	94 30       	cpi	r25, 0x04	; 4
     eae:	19 f4       	brne	.+6      	; 0xeb6 <__mulsf3+0x4e>
     eb0:	82 30       	cpi	r24, 0x02	; 2
     eb2:	51 f4       	brne	.+20     	; 0xec8 <__mulsf3+0x60>
     eb4:	04 c0       	rjmp	.+8      	; 0xebe <__mulsf3+0x56>
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	29 f4       	brne	.+10     	; 0xec4 <__mulsf3+0x5c>
     eba:	92 30       	cpi	r25, 0x02	; 2
     ebc:	81 f4       	brne	.+32     	; 0xede <__mulsf3+0x76>
     ebe:	8a e0       	ldi	r24, 0x0A	; 10
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	c6 c0       	rjmp	.+396    	; 0x1050 <__mulsf3+0x1e8>
     ec4:	92 30       	cpi	r25, 0x02	; 2
     ec6:	49 f4       	brne	.+18     	; 0xeda <__mulsf3+0x72>
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ecc:	8a 89       	ldd	r24, Y+18	; 0x12
     ece:	98 13       	cpse	r25, r24
     ed0:	21 e0       	ldi	r18, 0x01	; 1
     ed2:	2a 87       	std	Y+10, r18	; 0x0a
     ed4:	ce 01       	movw	r24, r28
     ed6:	09 96       	adiw	r24, 0x09	; 9
     ed8:	bb c0       	rjmp	.+374    	; 0x1050 <__mulsf3+0x1e8>
     eda:	82 30       	cpi	r24, 0x02	; 2
     edc:	49 f4       	brne	.+18     	; 0xef0 <__mulsf3+0x88>
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee2:	8a 89       	ldd	r24, Y+18	; 0x12
     ee4:	98 13       	cpse	r25, r24
     ee6:	21 e0       	ldi	r18, 0x01	; 1
     ee8:	2a 8b       	std	Y+18, r18	; 0x12
     eea:	ce 01       	movw	r24, r28
     eec:	41 96       	adiw	r24, 0x11	; 17
     eee:	b0 c0       	rjmp	.+352    	; 0x1050 <__mulsf3+0x1e8>
     ef0:	2d 84       	ldd	r2, Y+13	; 0x0d
     ef2:	3e 84       	ldd	r3, Y+14	; 0x0e
     ef4:	4f 84       	ldd	r4, Y+15	; 0x0f
     ef6:	58 88       	ldd	r5, Y+16	; 0x10
     ef8:	6d 88       	ldd	r6, Y+21	; 0x15
     efa:	7e 88       	ldd	r7, Y+22	; 0x16
     efc:	8f 88       	ldd	r8, Y+23	; 0x17
     efe:	98 8c       	ldd	r9, Y+24	; 0x18
     f00:	ee 24       	eor	r14, r14
     f02:	ff 24       	eor	r15, r15
     f04:	87 01       	movw	r16, r14
     f06:	aa 24       	eor	r10, r10
     f08:	bb 24       	eor	r11, r11
     f0a:	65 01       	movw	r12, r10
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	e0 e0       	ldi	r30, 0x00	; 0
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	c1 01       	movw	r24, r2
     f1a:	81 70       	andi	r24, 0x01	; 1
     f1c:	90 70       	andi	r25, 0x00	; 0
     f1e:	89 2b       	or	r24, r25
     f20:	e9 f0       	breq	.+58     	; 0xf5c <__mulsf3+0xf4>
     f22:	e6 0c       	add	r14, r6
     f24:	f7 1c       	adc	r15, r7
     f26:	08 1d       	adc	r16, r8
     f28:	19 1d       	adc	r17, r9
     f2a:	9a 01       	movw	r18, r20
     f2c:	ab 01       	movw	r20, r22
     f2e:	2a 0d       	add	r18, r10
     f30:	3b 1d       	adc	r19, r11
     f32:	4c 1d       	adc	r20, r12
     f34:	5d 1d       	adc	r21, r13
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a0 e0       	ldi	r26, 0x00	; 0
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e6 14       	cp	r14, r6
     f40:	f7 04       	cpc	r15, r7
     f42:	08 05       	cpc	r16, r8
     f44:	19 05       	cpc	r17, r9
     f46:	20 f4       	brcc	.+8      	; 0xf50 <__mulsf3+0xe8>
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	a0 e0       	ldi	r26, 0x00	; 0
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	ba 01       	movw	r22, r20
     f52:	a9 01       	movw	r20, r18
     f54:	48 0f       	add	r20, r24
     f56:	59 1f       	adc	r21, r25
     f58:	6a 1f       	adc	r22, r26
     f5a:	7b 1f       	adc	r23, r27
     f5c:	aa 0c       	add	r10, r10
     f5e:	bb 1c       	adc	r11, r11
     f60:	cc 1c       	adc	r12, r12
     f62:	dd 1c       	adc	r13, r13
     f64:	97 fe       	sbrs	r9, 7
     f66:	08 c0       	rjmp	.+16     	; 0xf78 <__mulsf3+0x110>
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	a0 e0       	ldi	r26, 0x00	; 0
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	a8 2a       	or	r10, r24
     f72:	b9 2a       	or	r11, r25
     f74:	ca 2a       	or	r12, r26
     f76:	db 2a       	or	r13, r27
     f78:	31 96       	adiw	r30, 0x01	; 1
     f7a:	e0 32       	cpi	r30, 0x20	; 32
     f7c:	f1 05       	cpc	r31, r1
     f7e:	49 f0       	breq	.+18     	; 0xf92 <__mulsf3+0x12a>
     f80:	66 0c       	add	r6, r6
     f82:	77 1c       	adc	r7, r7
     f84:	88 1c       	adc	r8, r8
     f86:	99 1c       	adc	r9, r9
     f88:	56 94       	lsr	r5
     f8a:	47 94       	ror	r4
     f8c:	37 94       	ror	r3
     f8e:	27 94       	ror	r2
     f90:	c3 cf       	rjmp	.-122    	; 0xf18 <__mulsf3+0xb0>
     f92:	fa 85       	ldd	r31, Y+10	; 0x0a
     f94:	ea 89       	ldd	r30, Y+18	; 0x12
     f96:	2b 89       	ldd	r18, Y+19	; 0x13
     f98:	3c 89       	ldd	r19, Y+20	; 0x14
     f9a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f9c:	9c 85       	ldd	r25, Y+12	; 0x0c
     f9e:	28 0f       	add	r18, r24
     fa0:	39 1f       	adc	r19, r25
     fa2:	2e 5f       	subi	r18, 0xFE	; 254
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	17 c0       	rjmp	.+46     	; 0xfd6 <__mulsf3+0x16e>
     fa8:	ca 01       	movw	r24, r20
     faa:	81 70       	andi	r24, 0x01	; 1
     fac:	90 70       	andi	r25, 0x00	; 0
     fae:	89 2b       	or	r24, r25
     fb0:	61 f0       	breq	.+24     	; 0xfca <__mulsf3+0x162>
     fb2:	16 95       	lsr	r17
     fb4:	07 95       	ror	r16
     fb6:	f7 94       	ror	r15
     fb8:	e7 94       	ror	r14
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a0 e0       	ldi	r26, 0x00	; 0
     fc0:	b0 e8       	ldi	r27, 0x80	; 128
     fc2:	e8 2a       	or	r14, r24
     fc4:	f9 2a       	or	r15, r25
     fc6:	0a 2b       	or	r16, r26
     fc8:	1b 2b       	or	r17, r27
     fca:	76 95       	lsr	r23
     fcc:	67 95       	ror	r22
     fce:	57 95       	ror	r21
     fd0:	47 95       	ror	r20
     fd2:	2f 5f       	subi	r18, 0xFF	; 255
     fd4:	3f 4f       	sbci	r19, 0xFF	; 255
     fd6:	77 fd       	sbrc	r23, 7
     fd8:	e7 cf       	rjmp	.-50     	; 0xfa8 <__mulsf3+0x140>
     fda:	0c c0       	rjmp	.+24     	; 0xff4 <__mulsf3+0x18c>
     fdc:	44 0f       	add	r20, r20
     fde:	55 1f       	adc	r21, r21
     fe0:	66 1f       	adc	r22, r22
     fe2:	77 1f       	adc	r23, r23
     fe4:	17 fd       	sbrc	r17, 7
     fe6:	41 60       	ori	r20, 0x01	; 1
     fe8:	ee 0c       	add	r14, r14
     fea:	ff 1c       	adc	r15, r15
     fec:	00 1f       	adc	r16, r16
     fee:	11 1f       	adc	r17, r17
     ff0:	21 50       	subi	r18, 0x01	; 1
     ff2:	30 40       	sbci	r19, 0x00	; 0
     ff4:	40 30       	cpi	r20, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	59 07       	cpc	r21, r25
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	69 07       	cpc	r22, r25
     ffe:	90 e4       	ldi	r25, 0x40	; 64
    1000:	79 07       	cpc	r23, r25
    1002:	60 f3       	brcs	.-40     	; 0xfdc <__mulsf3+0x174>
    1004:	2b 8f       	std	Y+27, r18	; 0x1b
    1006:	3c 8f       	std	Y+28, r19	; 0x1c
    1008:	db 01       	movw	r26, r22
    100a:	ca 01       	movw	r24, r20
    100c:	8f 77       	andi	r24, 0x7F	; 127
    100e:	90 70       	andi	r25, 0x00	; 0
    1010:	a0 70       	andi	r26, 0x00	; 0
    1012:	b0 70       	andi	r27, 0x00	; 0
    1014:	80 34       	cpi	r24, 0x40	; 64
    1016:	91 05       	cpc	r25, r1
    1018:	a1 05       	cpc	r26, r1
    101a:	b1 05       	cpc	r27, r1
    101c:	61 f4       	brne	.+24     	; 0x1036 <__mulsf3+0x1ce>
    101e:	47 fd       	sbrc	r20, 7
    1020:	0a c0       	rjmp	.+20     	; 0x1036 <__mulsf3+0x1ce>
    1022:	e1 14       	cp	r14, r1
    1024:	f1 04       	cpc	r15, r1
    1026:	01 05       	cpc	r16, r1
    1028:	11 05       	cpc	r17, r1
    102a:	29 f0       	breq	.+10     	; 0x1036 <__mulsf3+0x1ce>
    102c:	40 5c       	subi	r20, 0xC0	; 192
    102e:	5f 4f       	sbci	r21, 0xFF	; 255
    1030:	6f 4f       	sbci	r22, 0xFF	; 255
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	40 78       	andi	r20, 0x80	; 128
    1036:	1a 8e       	std	Y+26, r1	; 0x1a
    1038:	fe 17       	cp	r31, r30
    103a:	11 f0       	breq	.+4      	; 0x1040 <__mulsf3+0x1d8>
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	8a 8f       	std	Y+26, r24	; 0x1a
    1040:	4d 8f       	std	Y+29, r20	; 0x1d
    1042:	5e 8f       	std	Y+30, r21	; 0x1e
    1044:	6f 8f       	std	Y+31, r22	; 0x1f
    1046:	78 a3       	std	Y+32, r23	; 0x20
    1048:	83 e0       	ldi	r24, 0x03	; 3
    104a:	89 8f       	std	Y+25, r24	; 0x19
    104c:	ce 01       	movw	r24, r28
    104e:	49 96       	adiw	r24, 0x19	; 25
    1050:	0e 94 be 09 	call	0x137c	; 0x137c <__pack_f>
    1054:	a0 96       	adiw	r28, 0x20	; 32
    1056:	e2 e1       	ldi	r30, 0x12	; 18
    1058:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__epilogue_restores__>

0000105c <__divsf3>:
    105c:	a8 e1       	ldi	r26, 0x18	; 24
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e4 e3       	ldi	r30, 0x34	; 52
    1062:	f8 e0       	ldi	r31, 0x08	; 8
    1064:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__prologue_saves__+0x10>
    1068:	69 83       	std	Y+1, r22	; 0x01
    106a:	7a 83       	std	Y+2, r23	; 0x02
    106c:	8b 83       	std	Y+3, r24	; 0x03
    106e:	9c 83       	std	Y+4, r25	; 0x04
    1070:	2d 83       	std	Y+5, r18	; 0x05
    1072:	3e 83       	std	Y+6, r19	; 0x06
    1074:	4f 83       	std	Y+7, r20	; 0x07
    1076:	58 87       	std	Y+8, r21	; 0x08
    1078:	b9 e0       	ldi	r27, 0x09	; 9
    107a:	eb 2e       	mov	r14, r27
    107c:	f1 2c       	mov	r15, r1
    107e:	ec 0e       	add	r14, r28
    1080:	fd 1e       	adc	r15, r29
    1082:	ce 01       	movw	r24, r28
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	b7 01       	movw	r22, r14
    1088:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
    108c:	8e 01       	movw	r16, r28
    108e:	0f 5e       	subi	r16, 0xEF	; 239
    1090:	1f 4f       	sbci	r17, 0xFF	; 255
    1092:	ce 01       	movw	r24, r28
    1094:	05 96       	adiw	r24, 0x05	; 5
    1096:	b8 01       	movw	r22, r16
    1098:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
    109c:	29 85       	ldd	r18, Y+9	; 0x09
    109e:	22 30       	cpi	r18, 0x02	; 2
    10a0:	08 f4       	brcc	.+2      	; 0x10a4 <__divsf3+0x48>
    10a2:	7e c0       	rjmp	.+252    	; 0x11a0 <__divsf3+0x144>
    10a4:	39 89       	ldd	r19, Y+17	; 0x11
    10a6:	32 30       	cpi	r19, 0x02	; 2
    10a8:	10 f4       	brcc	.+4      	; 0x10ae <__divsf3+0x52>
    10aa:	b8 01       	movw	r22, r16
    10ac:	7c c0       	rjmp	.+248    	; 0x11a6 <__divsf3+0x14a>
    10ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    10b0:	9a 89       	ldd	r25, Y+18	; 0x12
    10b2:	89 27       	eor	r24, r25
    10b4:	8a 87       	std	Y+10, r24	; 0x0a
    10b6:	24 30       	cpi	r18, 0x04	; 4
    10b8:	11 f0       	breq	.+4      	; 0x10be <__divsf3+0x62>
    10ba:	22 30       	cpi	r18, 0x02	; 2
    10bc:	31 f4       	brne	.+12     	; 0x10ca <__divsf3+0x6e>
    10be:	23 17       	cp	r18, r19
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <__divsf3+0x68>
    10c2:	6e c0       	rjmp	.+220    	; 0x11a0 <__divsf3+0x144>
    10c4:	6a e0       	ldi	r22, 0x0A	; 10
    10c6:	71 e0       	ldi	r23, 0x01	; 1
    10c8:	6e c0       	rjmp	.+220    	; 0x11a6 <__divsf3+0x14a>
    10ca:	34 30       	cpi	r19, 0x04	; 4
    10cc:	39 f4       	brne	.+14     	; 0x10dc <__divsf3+0x80>
    10ce:	1d 86       	std	Y+13, r1	; 0x0d
    10d0:	1e 86       	std	Y+14, r1	; 0x0e
    10d2:	1f 86       	std	Y+15, r1	; 0x0f
    10d4:	18 8a       	std	Y+16, r1	; 0x10
    10d6:	1c 86       	std	Y+12, r1	; 0x0c
    10d8:	1b 86       	std	Y+11, r1	; 0x0b
    10da:	04 c0       	rjmp	.+8      	; 0x10e4 <__divsf3+0x88>
    10dc:	32 30       	cpi	r19, 0x02	; 2
    10de:	21 f4       	brne	.+8      	; 0x10e8 <__divsf3+0x8c>
    10e0:	84 e0       	ldi	r24, 0x04	; 4
    10e2:	89 87       	std	Y+9, r24	; 0x09
    10e4:	b7 01       	movw	r22, r14
    10e6:	5f c0       	rjmp	.+190    	; 0x11a6 <__divsf3+0x14a>
    10e8:	2b 85       	ldd	r18, Y+11	; 0x0b
    10ea:	3c 85       	ldd	r19, Y+12	; 0x0c
    10ec:	8b 89       	ldd	r24, Y+19	; 0x13
    10ee:	9c 89       	ldd	r25, Y+20	; 0x14
    10f0:	28 1b       	sub	r18, r24
    10f2:	39 0b       	sbc	r19, r25
    10f4:	3c 87       	std	Y+12, r19	; 0x0c
    10f6:	2b 87       	std	Y+11, r18	; 0x0b
    10f8:	ed 84       	ldd	r14, Y+13	; 0x0d
    10fa:	fe 84       	ldd	r15, Y+14	; 0x0e
    10fc:	0f 85       	ldd	r16, Y+15	; 0x0f
    10fe:	18 89       	ldd	r17, Y+16	; 0x10
    1100:	ad 88       	ldd	r10, Y+21	; 0x15
    1102:	be 88       	ldd	r11, Y+22	; 0x16
    1104:	cf 88       	ldd	r12, Y+23	; 0x17
    1106:	d8 8c       	ldd	r13, Y+24	; 0x18
    1108:	ea 14       	cp	r14, r10
    110a:	fb 04       	cpc	r15, r11
    110c:	0c 05       	cpc	r16, r12
    110e:	1d 05       	cpc	r17, r13
    1110:	40 f4       	brcc	.+16     	; 0x1122 <__divsf3+0xc6>
    1112:	ee 0c       	add	r14, r14
    1114:	ff 1c       	adc	r15, r15
    1116:	00 1f       	adc	r16, r16
    1118:	11 1f       	adc	r17, r17
    111a:	21 50       	subi	r18, 0x01	; 1
    111c:	30 40       	sbci	r19, 0x00	; 0
    111e:	3c 87       	std	Y+12, r19	; 0x0c
    1120:	2b 87       	std	Y+11, r18	; 0x0b
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	a0 e0       	ldi	r26, 0x00	; 0
    1130:	b0 e4       	ldi	r27, 0x40	; 64
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	ea 14       	cp	r14, r10
    1138:	fb 04       	cpc	r15, r11
    113a:	0c 05       	cpc	r16, r12
    113c:	1d 05       	cpc	r17, r13
    113e:	40 f0       	brcs	.+16     	; 0x1150 <__divsf3+0xf4>
    1140:	28 2b       	or	r18, r24
    1142:	39 2b       	or	r19, r25
    1144:	4a 2b       	or	r20, r26
    1146:	5b 2b       	or	r21, r27
    1148:	ea 18       	sub	r14, r10
    114a:	fb 08       	sbc	r15, r11
    114c:	0c 09       	sbc	r16, r12
    114e:	1d 09       	sbc	r17, r13
    1150:	b6 95       	lsr	r27
    1152:	a7 95       	ror	r26
    1154:	97 95       	ror	r25
    1156:	87 95       	ror	r24
    1158:	ee 0c       	add	r14, r14
    115a:	ff 1c       	adc	r15, r15
    115c:	00 1f       	adc	r16, r16
    115e:	11 1f       	adc	r17, r17
    1160:	6f 5f       	subi	r22, 0xFF	; 255
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	6f 31       	cpi	r22, 0x1F	; 31
    1166:	71 05       	cpc	r23, r1
    1168:	31 f7       	brne	.-52     	; 0x1136 <__divsf3+0xda>
    116a:	da 01       	movw	r26, r20
    116c:	c9 01       	movw	r24, r18
    116e:	8f 77       	andi	r24, 0x7F	; 127
    1170:	90 70       	andi	r25, 0x00	; 0
    1172:	a0 70       	andi	r26, 0x00	; 0
    1174:	b0 70       	andi	r27, 0x00	; 0
    1176:	80 34       	cpi	r24, 0x40	; 64
    1178:	91 05       	cpc	r25, r1
    117a:	a1 05       	cpc	r26, r1
    117c:	b1 05       	cpc	r27, r1
    117e:	61 f4       	brne	.+24     	; 0x1198 <__divsf3+0x13c>
    1180:	27 fd       	sbrc	r18, 7
    1182:	0a c0       	rjmp	.+20     	; 0x1198 <__divsf3+0x13c>
    1184:	e1 14       	cp	r14, r1
    1186:	f1 04       	cpc	r15, r1
    1188:	01 05       	cpc	r16, r1
    118a:	11 05       	cpc	r17, r1
    118c:	29 f0       	breq	.+10     	; 0x1198 <__divsf3+0x13c>
    118e:	20 5c       	subi	r18, 0xC0	; 192
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	4f 4f       	sbci	r20, 0xFF	; 255
    1194:	5f 4f       	sbci	r21, 0xFF	; 255
    1196:	20 78       	andi	r18, 0x80	; 128
    1198:	2d 87       	std	Y+13, r18	; 0x0d
    119a:	3e 87       	std	Y+14, r19	; 0x0e
    119c:	4f 87       	std	Y+15, r20	; 0x0f
    119e:	58 8b       	std	Y+16, r21	; 0x10
    11a0:	be 01       	movw	r22, r28
    11a2:	67 5f       	subi	r22, 0xF7	; 247
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	cb 01       	movw	r24, r22
    11a8:	0e 94 be 09 	call	0x137c	; 0x137c <__pack_f>
    11ac:	68 96       	adiw	r28, 0x18	; 24
    11ae:	ea e0       	ldi	r30, 0x0A	; 10
    11b0:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <__epilogue_restores__+0x10>

000011b4 <__gtsf2>:
    11b4:	a8 e1       	ldi	r26, 0x18	; 24
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e0 ee       	ldi	r30, 0xE0	; 224
    11ba:	f8 e0       	ldi	r31, 0x08	; 8
    11bc:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__prologue_saves__+0x18>
    11c0:	69 83       	std	Y+1, r22	; 0x01
    11c2:	7a 83       	std	Y+2, r23	; 0x02
    11c4:	8b 83       	std	Y+3, r24	; 0x03
    11c6:	9c 83       	std	Y+4, r25	; 0x04
    11c8:	2d 83       	std	Y+5, r18	; 0x05
    11ca:	3e 83       	std	Y+6, r19	; 0x06
    11cc:	4f 83       	std	Y+7, r20	; 0x07
    11ce:	58 87       	std	Y+8, r21	; 0x08
    11d0:	89 e0       	ldi	r24, 0x09	; 9
    11d2:	e8 2e       	mov	r14, r24
    11d4:	f1 2c       	mov	r15, r1
    11d6:	ec 0e       	add	r14, r28
    11d8:	fd 1e       	adc	r15, r29
    11da:	ce 01       	movw	r24, r28
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	b7 01       	movw	r22, r14
    11e0:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
    11e4:	8e 01       	movw	r16, r28
    11e6:	0f 5e       	subi	r16, 0xEF	; 239
    11e8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ea:	ce 01       	movw	r24, r28
    11ec:	05 96       	adiw	r24, 0x05	; 5
    11ee:	b8 01       	movw	r22, r16
    11f0:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
    11f4:	89 85       	ldd	r24, Y+9	; 0x09
    11f6:	82 30       	cpi	r24, 0x02	; 2
    11f8:	40 f0       	brcs	.+16     	; 0x120a <__gtsf2+0x56>
    11fa:	89 89       	ldd	r24, Y+17	; 0x11
    11fc:	82 30       	cpi	r24, 0x02	; 2
    11fe:	28 f0       	brcs	.+10     	; 0x120a <__gtsf2+0x56>
    1200:	c7 01       	movw	r24, r14
    1202:	b8 01       	movw	r22, r16
    1204:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__fpcmp_parts_f>
    1208:	01 c0       	rjmp	.+2      	; 0x120c <__gtsf2+0x58>
    120a:	8f ef       	ldi	r24, 0xFF	; 255
    120c:	68 96       	adiw	r28, 0x18	; 24
    120e:	e6 e0       	ldi	r30, 0x06	; 6
    1210:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__epilogue_restores__+0x18>

00001214 <__gesf2>:
    1214:	a8 e1       	ldi	r26, 0x18	; 24
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e0 e1       	ldi	r30, 0x10	; 16
    121a:	f9 e0       	ldi	r31, 0x09	; 9
    121c:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__prologue_saves__+0x18>
    1220:	69 83       	std	Y+1, r22	; 0x01
    1222:	7a 83       	std	Y+2, r23	; 0x02
    1224:	8b 83       	std	Y+3, r24	; 0x03
    1226:	9c 83       	std	Y+4, r25	; 0x04
    1228:	2d 83       	std	Y+5, r18	; 0x05
    122a:	3e 83       	std	Y+6, r19	; 0x06
    122c:	4f 83       	std	Y+7, r20	; 0x07
    122e:	58 87       	std	Y+8, r21	; 0x08
    1230:	89 e0       	ldi	r24, 0x09	; 9
    1232:	e8 2e       	mov	r14, r24
    1234:	f1 2c       	mov	r15, r1
    1236:	ec 0e       	add	r14, r28
    1238:	fd 1e       	adc	r15, r29
    123a:	ce 01       	movw	r24, r28
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	b7 01       	movw	r22, r14
    1240:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
    1244:	8e 01       	movw	r16, r28
    1246:	0f 5e       	subi	r16, 0xEF	; 239
    1248:	1f 4f       	sbci	r17, 0xFF	; 255
    124a:	ce 01       	movw	r24, r28
    124c:	05 96       	adiw	r24, 0x05	; 5
    124e:	b8 01       	movw	r22, r16
    1250:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
    1254:	89 85       	ldd	r24, Y+9	; 0x09
    1256:	82 30       	cpi	r24, 0x02	; 2
    1258:	40 f0       	brcs	.+16     	; 0x126a <__gesf2+0x56>
    125a:	89 89       	ldd	r24, Y+17	; 0x11
    125c:	82 30       	cpi	r24, 0x02	; 2
    125e:	28 f0       	brcs	.+10     	; 0x126a <__gesf2+0x56>
    1260:	c7 01       	movw	r24, r14
    1262:	b8 01       	movw	r22, r16
    1264:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__fpcmp_parts_f>
    1268:	01 c0       	rjmp	.+2      	; 0x126c <__gesf2+0x58>
    126a:	8f ef       	ldi	r24, 0xFF	; 255
    126c:	68 96       	adiw	r28, 0x18	; 24
    126e:	e6 e0       	ldi	r30, 0x06	; 6
    1270:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__epilogue_restores__+0x18>

00001274 <__ltsf2>:
    1274:	a8 e1       	ldi	r26, 0x18	; 24
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e0 e4       	ldi	r30, 0x40	; 64
    127a:	f9 e0       	ldi	r31, 0x09	; 9
    127c:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__prologue_saves__+0x18>
    1280:	69 83       	std	Y+1, r22	; 0x01
    1282:	7a 83       	std	Y+2, r23	; 0x02
    1284:	8b 83       	std	Y+3, r24	; 0x03
    1286:	9c 83       	std	Y+4, r25	; 0x04
    1288:	2d 83       	std	Y+5, r18	; 0x05
    128a:	3e 83       	std	Y+6, r19	; 0x06
    128c:	4f 83       	std	Y+7, r20	; 0x07
    128e:	58 87       	std	Y+8, r21	; 0x08
    1290:	89 e0       	ldi	r24, 0x09	; 9
    1292:	e8 2e       	mov	r14, r24
    1294:	f1 2c       	mov	r15, r1
    1296:	ec 0e       	add	r14, r28
    1298:	fd 1e       	adc	r15, r29
    129a:	ce 01       	movw	r24, r28
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	b7 01       	movw	r22, r14
    12a0:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
    12a4:	8e 01       	movw	r16, r28
    12a6:	0f 5e       	subi	r16, 0xEF	; 239
    12a8:	1f 4f       	sbci	r17, 0xFF	; 255
    12aa:	ce 01       	movw	r24, r28
    12ac:	05 96       	adiw	r24, 0x05	; 5
    12ae:	b8 01       	movw	r22, r16
    12b0:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
    12b4:	89 85       	ldd	r24, Y+9	; 0x09
    12b6:	82 30       	cpi	r24, 0x02	; 2
    12b8:	40 f0       	brcs	.+16     	; 0x12ca <__ltsf2+0x56>
    12ba:	89 89       	ldd	r24, Y+17	; 0x11
    12bc:	82 30       	cpi	r24, 0x02	; 2
    12be:	28 f0       	brcs	.+10     	; 0x12ca <__ltsf2+0x56>
    12c0:	c7 01       	movw	r24, r14
    12c2:	b8 01       	movw	r22, r16
    12c4:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__fpcmp_parts_f>
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <__ltsf2+0x58>
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	68 96       	adiw	r28, 0x18	; 24
    12ce:	e6 e0       	ldi	r30, 0x06	; 6
    12d0:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__epilogue_restores__+0x18>

000012d4 <__fixsfsi>:
    12d4:	ac e0       	ldi	r26, 0x0C	; 12
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e0 e7       	ldi	r30, 0x70	; 112
    12da:	f9 e0       	ldi	r31, 0x09	; 9
    12dc:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__prologue_saves__+0x20>
    12e0:	69 83       	std	Y+1, r22	; 0x01
    12e2:	7a 83       	std	Y+2, r23	; 0x02
    12e4:	8b 83       	std	Y+3, r24	; 0x03
    12e6:	9c 83       	std	Y+4, r25	; 0x04
    12e8:	ce 01       	movw	r24, r28
    12ea:	01 96       	adiw	r24, 0x01	; 1
    12ec:	be 01       	movw	r22, r28
    12ee:	6b 5f       	subi	r22, 0xFB	; 251
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	82 30       	cpi	r24, 0x02	; 2
    12fa:	61 f1       	breq	.+88     	; 0x1354 <__fixsfsi+0x80>
    12fc:	82 30       	cpi	r24, 0x02	; 2
    12fe:	50 f1       	brcs	.+84     	; 0x1354 <__fixsfsi+0x80>
    1300:	84 30       	cpi	r24, 0x04	; 4
    1302:	21 f4       	brne	.+8      	; 0x130c <__fixsfsi+0x38>
    1304:	8e 81       	ldd	r24, Y+6	; 0x06
    1306:	88 23       	and	r24, r24
    1308:	51 f1       	breq	.+84     	; 0x135e <__fixsfsi+0x8a>
    130a:	2e c0       	rjmp	.+92     	; 0x1368 <__fixsfsi+0x94>
    130c:	2f 81       	ldd	r18, Y+7	; 0x07
    130e:	38 85       	ldd	r19, Y+8	; 0x08
    1310:	37 fd       	sbrc	r19, 7
    1312:	20 c0       	rjmp	.+64     	; 0x1354 <__fixsfsi+0x80>
    1314:	6e 81       	ldd	r22, Y+6	; 0x06
    1316:	2f 31       	cpi	r18, 0x1F	; 31
    1318:	31 05       	cpc	r19, r1
    131a:	1c f0       	brlt	.+6      	; 0x1322 <__fixsfsi+0x4e>
    131c:	66 23       	and	r22, r22
    131e:	f9 f0       	breq	.+62     	; 0x135e <__fixsfsi+0x8a>
    1320:	23 c0       	rjmp	.+70     	; 0x1368 <__fixsfsi+0x94>
    1322:	8e e1       	ldi	r24, 0x1E	; 30
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	82 1b       	sub	r24, r18
    1328:	93 0b       	sbc	r25, r19
    132a:	29 85       	ldd	r18, Y+9	; 0x09
    132c:	3a 85       	ldd	r19, Y+10	; 0x0a
    132e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1330:	5c 85       	ldd	r21, Y+12	; 0x0c
    1332:	04 c0       	rjmp	.+8      	; 0x133c <__fixsfsi+0x68>
    1334:	56 95       	lsr	r21
    1336:	47 95       	ror	r20
    1338:	37 95       	ror	r19
    133a:	27 95       	ror	r18
    133c:	8a 95       	dec	r24
    133e:	d2 f7       	brpl	.-12     	; 0x1334 <__fixsfsi+0x60>
    1340:	66 23       	and	r22, r22
    1342:	b1 f0       	breq	.+44     	; 0x1370 <__fixsfsi+0x9c>
    1344:	50 95       	com	r21
    1346:	40 95       	com	r20
    1348:	30 95       	com	r19
    134a:	21 95       	neg	r18
    134c:	3f 4f       	sbci	r19, 0xFF	; 255
    134e:	4f 4f       	sbci	r20, 0xFF	; 255
    1350:	5f 4f       	sbci	r21, 0xFF	; 255
    1352:	0e c0       	rjmp	.+28     	; 0x1370 <__fixsfsi+0x9c>
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	50 e0       	ldi	r21, 0x00	; 0
    135c:	09 c0       	rjmp	.+18     	; 0x1370 <__fixsfsi+0x9c>
    135e:	2f ef       	ldi	r18, 0xFF	; 255
    1360:	3f ef       	ldi	r19, 0xFF	; 255
    1362:	4f ef       	ldi	r20, 0xFF	; 255
    1364:	5f e7       	ldi	r21, 0x7F	; 127
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <__fixsfsi+0x9c>
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	50 e8       	ldi	r21, 0x80	; 128
    1370:	b9 01       	movw	r22, r18
    1372:	ca 01       	movw	r24, r20
    1374:	2c 96       	adiw	r28, 0x0c	; 12
    1376:	e2 e0       	ldi	r30, 0x02	; 2
    1378:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__epilogue_restores__+0x20>

0000137c <__pack_f>:
    137c:	df 92       	push	r13
    137e:	ef 92       	push	r14
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	fc 01       	movw	r30, r24
    1388:	e4 80       	ldd	r14, Z+4	; 0x04
    138a:	f5 80       	ldd	r15, Z+5	; 0x05
    138c:	06 81       	ldd	r16, Z+6	; 0x06
    138e:	17 81       	ldd	r17, Z+7	; 0x07
    1390:	d1 80       	ldd	r13, Z+1	; 0x01
    1392:	80 81       	ld	r24, Z
    1394:	82 30       	cpi	r24, 0x02	; 2
    1396:	48 f4       	brcc	.+18     	; 0x13aa <__pack_f+0x2e>
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	a0 e1       	ldi	r26, 0x10	; 16
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e8 2a       	or	r14, r24
    13a2:	f9 2a       	or	r15, r25
    13a4:	0a 2b       	or	r16, r26
    13a6:	1b 2b       	or	r17, r27
    13a8:	a5 c0       	rjmp	.+330    	; 0x14f4 <__pack_f+0x178>
    13aa:	84 30       	cpi	r24, 0x04	; 4
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <__pack_f+0x34>
    13ae:	9f c0       	rjmp	.+318    	; 0x14ee <__pack_f+0x172>
    13b0:	82 30       	cpi	r24, 0x02	; 2
    13b2:	21 f4       	brne	.+8      	; 0x13bc <__pack_f+0x40>
    13b4:	ee 24       	eor	r14, r14
    13b6:	ff 24       	eor	r15, r15
    13b8:	87 01       	movw	r16, r14
    13ba:	05 c0       	rjmp	.+10     	; 0x13c6 <__pack_f+0x4a>
    13bc:	e1 14       	cp	r14, r1
    13be:	f1 04       	cpc	r15, r1
    13c0:	01 05       	cpc	r16, r1
    13c2:	11 05       	cpc	r17, r1
    13c4:	19 f4       	brne	.+6      	; 0x13cc <__pack_f+0x50>
    13c6:	e0 e0       	ldi	r30, 0x00	; 0
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	96 c0       	rjmp	.+300    	; 0x14f8 <__pack_f+0x17c>
    13cc:	62 81       	ldd	r22, Z+2	; 0x02
    13ce:	73 81       	ldd	r23, Z+3	; 0x03
    13d0:	9f ef       	ldi	r25, 0xFF	; 255
    13d2:	62 38       	cpi	r22, 0x82	; 130
    13d4:	79 07       	cpc	r23, r25
    13d6:	0c f0       	brlt	.+2      	; 0x13da <__pack_f+0x5e>
    13d8:	5b c0       	rjmp	.+182    	; 0x1490 <__pack_f+0x114>
    13da:	22 e8       	ldi	r18, 0x82	; 130
    13dc:	3f ef       	ldi	r19, 0xFF	; 255
    13de:	26 1b       	sub	r18, r22
    13e0:	37 0b       	sbc	r19, r23
    13e2:	2a 31       	cpi	r18, 0x1A	; 26
    13e4:	31 05       	cpc	r19, r1
    13e6:	2c f0       	brlt	.+10     	; 0x13f2 <__pack_f+0x76>
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e0       	ldi	r20, 0x00	; 0
    13ee:	50 e0       	ldi	r21, 0x00	; 0
    13f0:	2a c0       	rjmp	.+84     	; 0x1446 <__pack_f+0xca>
    13f2:	b8 01       	movw	r22, r16
    13f4:	a7 01       	movw	r20, r14
    13f6:	02 2e       	mov	r0, r18
    13f8:	04 c0       	rjmp	.+8      	; 0x1402 <__pack_f+0x86>
    13fa:	76 95       	lsr	r23
    13fc:	67 95       	ror	r22
    13fe:	57 95       	ror	r21
    1400:	47 95       	ror	r20
    1402:	0a 94       	dec	r0
    1404:	d2 f7       	brpl	.-12     	; 0x13fa <__pack_f+0x7e>
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a0 e0       	ldi	r26, 0x00	; 0
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	04 c0       	rjmp	.+8      	; 0x1418 <__pack_f+0x9c>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	aa 1f       	adc	r26, r26
    1416:	bb 1f       	adc	r27, r27
    1418:	2a 95       	dec	r18
    141a:	d2 f7       	brpl	.-12     	; 0x1410 <__pack_f+0x94>
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	a1 09       	sbc	r26, r1
    1420:	b1 09       	sbc	r27, r1
    1422:	8e 21       	and	r24, r14
    1424:	9f 21       	and	r25, r15
    1426:	a0 23       	and	r26, r16
    1428:	b1 23       	and	r27, r17
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	a1 05       	cpc	r26, r1
    142e:	b1 05       	cpc	r27, r1
    1430:	21 f0       	breq	.+8      	; 0x143a <__pack_f+0xbe>
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	a0 e0       	ldi	r26, 0x00	; 0
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	9a 01       	movw	r18, r20
    143c:	ab 01       	movw	r20, r22
    143e:	28 2b       	or	r18, r24
    1440:	39 2b       	or	r19, r25
    1442:	4a 2b       	or	r20, r26
    1444:	5b 2b       	or	r21, r27
    1446:	da 01       	movw	r26, r20
    1448:	c9 01       	movw	r24, r18
    144a:	8f 77       	andi	r24, 0x7F	; 127
    144c:	90 70       	andi	r25, 0x00	; 0
    144e:	a0 70       	andi	r26, 0x00	; 0
    1450:	b0 70       	andi	r27, 0x00	; 0
    1452:	80 34       	cpi	r24, 0x40	; 64
    1454:	91 05       	cpc	r25, r1
    1456:	a1 05       	cpc	r26, r1
    1458:	b1 05       	cpc	r27, r1
    145a:	39 f4       	brne	.+14     	; 0x146a <__pack_f+0xee>
    145c:	27 ff       	sbrs	r18, 7
    145e:	09 c0       	rjmp	.+18     	; 0x1472 <__pack_f+0xf6>
    1460:	20 5c       	subi	r18, 0xC0	; 192
    1462:	3f 4f       	sbci	r19, 0xFF	; 255
    1464:	4f 4f       	sbci	r20, 0xFF	; 255
    1466:	5f 4f       	sbci	r21, 0xFF	; 255
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <__pack_f+0xf6>
    146a:	21 5c       	subi	r18, 0xC1	; 193
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	4f 4f       	sbci	r20, 0xFF	; 255
    1470:	5f 4f       	sbci	r21, 0xFF	; 255
    1472:	e0 e0       	ldi	r30, 0x00	; 0
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	20 30       	cpi	r18, 0x00	; 0
    1478:	a0 e0       	ldi	r26, 0x00	; 0
    147a:	3a 07       	cpc	r19, r26
    147c:	a0 e0       	ldi	r26, 0x00	; 0
    147e:	4a 07       	cpc	r20, r26
    1480:	a0 e4       	ldi	r26, 0x40	; 64
    1482:	5a 07       	cpc	r21, r26
    1484:	10 f0       	brcs	.+4      	; 0x148a <__pack_f+0x10e>
    1486:	e1 e0       	ldi	r30, 0x01	; 1
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	79 01       	movw	r14, r18
    148c:	8a 01       	movw	r16, r20
    148e:	27 c0       	rjmp	.+78     	; 0x14de <__pack_f+0x162>
    1490:	60 38       	cpi	r22, 0x80	; 128
    1492:	71 05       	cpc	r23, r1
    1494:	64 f5       	brge	.+88     	; 0x14ee <__pack_f+0x172>
    1496:	fb 01       	movw	r30, r22
    1498:	e1 58       	subi	r30, 0x81	; 129
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	d8 01       	movw	r26, r16
    149e:	c7 01       	movw	r24, r14
    14a0:	8f 77       	andi	r24, 0x7F	; 127
    14a2:	90 70       	andi	r25, 0x00	; 0
    14a4:	a0 70       	andi	r26, 0x00	; 0
    14a6:	b0 70       	andi	r27, 0x00	; 0
    14a8:	80 34       	cpi	r24, 0x40	; 64
    14aa:	91 05       	cpc	r25, r1
    14ac:	a1 05       	cpc	r26, r1
    14ae:	b1 05       	cpc	r27, r1
    14b0:	39 f4       	brne	.+14     	; 0x14c0 <__pack_f+0x144>
    14b2:	e7 fe       	sbrs	r14, 7
    14b4:	0d c0       	rjmp	.+26     	; 0x14d0 <__pack_f+0x154>
    14b6:	80 e4       	ldi	r24, 0x40	; 64
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	a0 e0       	ldi	r26, 0x00	; 0
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	04 c0       	rjmp	.+8      	; 0x14c8 <__pack_f+0x14c>
    14c0:	8f e3       	ldi	r24, 0x3F	; 63
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	a0 e0       	ldi	r26, 0x00	; 0
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e8 0e       	add	r14, r24
    14ca:	f9 1e       	adc	r15, r25
    14cc:	0a 1f       	adc	r16, r26
    14ce:	1b 1f       	adc	r17, r27
    14d0:	17 ff       	sbrs	r17, 7
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <__pack_f+0x162>
    14d4:	16 95       	lsr	r17
    14d6:	07 95       	ror	r16
    14d8:	f7 94       	ror	r15
    14da:	e7 94       	ror	r14
    14dc:	31 96       	adiw	r30, 0x01	; 1
    14de:	87 e0       	ldi	r24, 0x07	; 7
    14e0:	16 95       	lsr	r17
    14e2:	07 95       	ror	r16
    14e4:	f7 94       	ror	r15
    14e6:	e7 94       	ror	r14
    14e8:	8a 95       	dec	r24
    14ea:	d1 f7       	brne	.-12     	; 0x14e0 <__pack_f+0x164>
    14ec:	05 c0       	rjmp	.+10     	; 0x14f8 <__pack_f+0x17c>
    14ee:	ee 24       	eor	r14, r14
    14f0:	ff 24       	eor	r15, r15
    14f2:	87 01       	movw	r16, r14
    14f4:	ef ef       	ldi	r30, 0xFF	; 255
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	6e 2f       	mov	r22, r30
    14fa:	67 95       	ror	r22
    14fc:	66 27       	eor	r22, r22
    14fe:	67 95       	ror	r22
    1500:	90 2f       	mov	r25, r16
    1502:	9f 77       	andi	r25, 0x7F	; 127
    1504:	d7 94       	ror	r13
    1506:	dd 24       	eor	r13, r13
    1508:	d7 94       	ror	r13
    150a:	8e 2f       	mov	r24, r30
    150c:	86 95       	lsr	r24
    150e:	49 2f       	mov	r20, r25
    1510:	46 2b       	or	r20, r22
    1512:	58 2f       	mov	r21, r24
    1514:	5d 29       	or	r21, r13
    1516:	b7 01       	movw	r22, r14
    1518:	ca 01       	movw	r24, r20
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	ff 90       	pop	r15
    1520:	ef 90       	pop	r14
    1522:	df 90       	pop	r13
    1524:	08 95       	ret

00001526 <__unpack_f>:
    1526:	fc 01       	movw	r30, r24
    1528:	db 01       	movw	r26, r22
    152a:	40 81       	ld	r20, Z
    152c:	51 81       	ldd	r21, Z+1	; 0x01
    152e:	22 81       	ldd	r18, Z+2	; 0x02
    1530:	62 2f       	mov	r22, r18
    1532:	6f 77       	andi	r22, 0x7F	; 127
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	22 1f       	adc	r18, r18
    1538:	22 27       	eor	r18, r18
    153a:	22 1f       	adc	r18, r18
    153c:	93 81       	ldd	r25, Z+3	; 0x03
    153e:	89 2f       	mov	r24, r25
    1540:	88 0f       	add	r24, r24
    1542:	82 2b       	or	r24, r18
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	99 1f       	adc	r25, r25
    154a:	99 27       	eor	r25, r25
    154c:	99 1f       	adc	r25, r25
    154e:	11 96       	adiw	r26, 0x01	; 1
    1550:	9c 93       	st	X, r25
    1552:	11 97       	sbiw	r26, 0x01	; 1
    1554:	21 15       	cp	r18, r1
    1556:	31 05       	cpc	r19, r1
    1558:	a9 f5       	brne	.+106    	; 0x15c4 <__unpack_f+0x9e>
    155a:	41 15       	cp	r20, r1
    155c:	51 05       	cpc	r21, r1
    155e:	61 05       	cpc	r22, r1
    1560:	71 05       	cpc	r23, r1
    1562:	11 f4       	brne	.+4      	; 0x1568 <__unpack_f+0x42>
    1564:	82 e0       	ldi	r24, 0x02	; 2
    1566:	37 c0       	rjmp	.+110    	; 0x15d6 <__unpack_f+0xb0>
    1568:	82 e8       	ldi	r24, 0x82	; 130
    156a:	9f ef       	ldi	r25, 0xFF	; 255
    156c:	13 96       	adiw	r26, 0x03	; 3
    156e:	9c 93       	st	X, r25
    1570:	8e 93       	st	-X, r24
    1572:	12 97       	sbiw	r26, 0x02	; 2
    1574:	9a 01       	movw	r18, r20
    1576:	ab 01       	movw	r20, r22
    1578:	67 e0       	ldi	r22, 0x07	; 7
    157a:	22 0f       	add	r18, r18
    157c:	33 1f       	adc	r19, r19
    157e:	44 1f       	adc	r20, r20
    1580:	55 1f       	adc	r21, r21
    1582:	6a 95       	dec	r22
    1584:	d1 f7       	brne	.-12     	; 0x157a <__unpack_f+0x54>
    1586:	83 e0       	ldi	r24, 0x03	; 3
    1588:	8c 93       	st	X, r24
    158a:	0d c0       	rjmp	.+26     	; 0x15a6 <__unpack_f+0x80>
    158c:	22 0f       	add	r18, r18
    158e:	33 1f       	adc	r19, r19
    1590:	44 1f       	adc	r20, r20
    1592:	55 1f       	adc	r21, r21
    1594:	12 96       	adiw	r26, 0x02	; 2
    1596:	8d 91       	ld	r24, X+
    1598:	9c 91       	ld	r25, X
    159a:	13 97       	sbiw	r26, 0x03	; 3
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	13 96       	adiw	r26, 0x03	; 3
    15a0:	9c 93       	st	X, r25
    15a2:	8e 93       	st	-X, r24
    15a4:	12 97       	sbiw	r26, 0x02	; 2
    15a6:	20 30       	cpi	r18, 0x00	; 0
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	38 07       	cpc	r19, r24
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	48 07       	cpc	r20, r24
    15b0:	80 e4       	ldi	r24, 0x40	; 64
    15b2:	58 07       	cpc	r21, r24
    15b4:	58 f3       	brcs	.-42     	; 0x158c <__unpack_f+0x66>
    15b6:	14 96       	adiw	r26, 0x04	; 4
    15b8:	2d 93       	st	X+, r18
    15ba:	3d 93       	st	X+, r19
    15bc:	4d 93       	st	X+, r20
    15be:	5c 93       	st	X, r21
    15c0:	17 97       	sbiw	r26, 0x07	; 7
    15c2:	08 95       	ret
    15c4:	2f 3f       	cpi	r18, 0xFF	; 255
    15c6:	31 05       	cpc	r19, r1
    15c8:	79 f4       	brne	.+30     	; 0x15e8 <__unpack_f+0xc2>
    15ca:	41 15       	cp	r20, r1
    15cc:	51 05       	cpc	r21, r1
    15ce:	61 05       	cpc	r22, r1
    15d0:	71 05       	cpc	r23, r1
    15d2:	19 f4       	brne	.+6      	; 0x15da <__unpack_f+0xb4>
    15d4:	84 e0       	ldi	r24, 0x04	; 4
    15d6:	8c 93       	st	X, r24
    15d8:	08 95       	ret
    15da:	64 ff       	sbrs	r22, 4
    15dc:	03 c0       	rjmp	.+6      	; 0x15e4 <__unpack_f+0xbe>
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	8c 93       	st	X, r24
    15e2:	12 c0       	rjmp	.+36     	; 0x1608 <__unpack_f+0xe2>
    15e4:	1c 92       	st	X, r1
    15e6:	10 c0       	rjmp	.+32     	; 0x1608 <__unpack_f+0xe2>
    15e8:	2f 57       	subi	r18, 0x7F	; 127
    15ea:	30 40       	sbci	r19, 0x00	; 0
    15ec:	13 96       	adiw	r26, 0x03	; 3
    15ee:	3c 93       	st	X, r19
    15f0:	2e 93       	st	-X, r18
    15f2:	12 97       	sbiw	r26, 0x02	; 2
    15f4:	83 e0       	ldi	r24, 0x03	; 3
    15f6:	8c 93       	st	X, r24
    15f8:	87 e0       	ldi	r24, 0x07	; 7
    15fa:	44 0f       	add	r20, r20
    15fc:	55 1f       	adc	r21, r21
    15fe:	66 1f       	adc	r22, r22
    1600:	77 1f       	adc	r23, r23
    1602:	8a 95       	dec	r24
    1604:	d1 f7       	brne	.-12     	; 0x15fa <__unpack_f+0xd4>
    1606:	70 64       	ori	r23, 0x40	; 64
    1608:	14 96       	adiw	r26, 0x04	; 4
    160a:	4d 93       	st	X+, r20
    160c:	5d 93       	st	X+, r21
    160e:	6d 93       	st	X+, r22
    1610:	7c 93       	st	X, r23
    1612:	17 97       	sbiw	r26, 0x07	; 7
    1614:	08 95       	ret

00001616 <__fpcmp_parts_f>:
    1616:	1f 93       	push	r17
    1618:	dc 01       	movw	r26, r24
    161a:	fb 01       	movw	r30, r22
    161c:	9c 91       	ld	r25, X
    161e:	92 30       	cpi	r25, 0x02	; 2
    1620:	08 f4       	brcc	.+2      	; 0x1624 <__fpcmp_parts_f+0xe>
    1622:	47 c0       	rjmp	.+142    	; 0x16b2 <__fpcmp_parts_f+0x9c>
    1624:	80 81       	ld	r24, Z
    1626:	82 30       	cpi	r24, 0x02	; 2
    1628:	08 f4       	brcc	.+2      	; 0x162c <__fpcmp_parts_f+0x16>
    162a:	43 c0       	rjmp	.+134    	; 0x16b2 <__fpcmp_parts_f+0x9c>
    162c:	94 30       	cpi	r25, 0x04	; 4
    162e:	51 f4       	brne	.+20     	; 0x1644 <__fpcmp_parts_f+0x2e>
    1630:	11 96       	adiw	r26, 0x01	; 1
    1632:	1c 91       	ld	r17, X
    1634:	84 30       	cpi	r24, 0x04	; 4
    1636:	99 f5       	brne	.+102    	; 0x169e <__fpcmp_parts_f+0x88>
    1638:	81 81       	ldd	r24, Z+1	; 0x01
    163a:	68 2f       	mov	r22, r24
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	61 1b       	sub	r22, r17
    1640:	71 09       	sbc	r23, r1
    1642:	3f c0       	rjmp	.+126    	; 0x16c2 <__fpcmp_parts_f+0xac>
    1644:	84 30       	cpi	r24, 0x04	; 4
    1646:	21 f0       	breq	.+8      	; 0x1650 <__fpcmp_parts_f+0x3a>
    1648:	92 30       	cpi	r25, 0x02	; 2
    164a:	31 f4       	brne	.+12     	; 0x1658 <__fpcmp_parts_f+0x42>
    164c:	82 30       	cpi	r24, 0x02	; 2
    164e:	b9 f1       	breq	.+110    	; 0x16be <__fpcmp_parts_f+0xa8>
    1650:	81 81       	ldd	r24, Z+1	; 0x01
    1652:	88 23       	and	r24, r24
    1654:	89 f1       	breq	.+98     	; 0x16b8 <__fpcmp_parts_f+0xa2>
    1656:	2d c0       	rjmp	.+90     	; 0x16b2 <__fpcmp_parts_f+0x9c>
    1658:	11 96       	adiw	r26, 0x01	; 1
    165a:	1c 91       	ld	r17, X
    165c:	11 97       	sbiw	r26, 0x01	; 1
    165e:	82 30       	cpi	r24, 0x02	; 2
    1660:	f1 f0       	breq	.+60     	; 0x169e <__fpcmp_parts_f+0x88>
    1662:	81 81       	ldd	r24, Z+1	; 0x01
    1664:	18 17       	cp	r17, r24
    1666:	d9 f4       	brne	.+54     	; 0x169e <__fpcmp_parts_f+0x88>
    1668:	12 96       	adiw	r26, 0x02	; 2
    166a:	2d 91       	ld	r18, X+
    166c:	3c 91       	ld	r19, X
    166e:	13 97       	sbiw	r26, 0x03	; 3
    1670:	82 81       	ldd	r24, Z+2	; 0x02
    1672:	93 81       	ldd	r25, Z+3	; 0x03
    1674:	82 17       	cp	r24, r18
    1676:	93 07       	cpc	r25, r19
    1678:	94 f0       	brlt	.+36     	; 0x169e <__fpcmp_parts_f+0x88>
    167a:	28 17       	cp	r18, r24
    167c:	39 07       	cpc	r19, r25
    167e:	bc f0       	brlt	.+46     	; 0x16ae <__fpcmp_parts_f+0x98>
    1680:	14 96       	adiw	r26, 0x04	; 4
    1682:	8d 91       	ld	r24, X+
    1684:	9d 91       	ld	r25, X+
    1686:	0d 90       	ld	r0, X+
    1688:	bc 91       	ld	r27, X
    168a:	a0 2d       	mov	r26, r0
    168c:	24 81       	ldd	r18, Z+4	; 0x04
    168e:	35 81       	ldd	r19, Z+5	; 0x05
    1690:	46 81       	ldd	r20, Z+6	; 0x06
    1692:	57 81       	ldd	r21, Z+7	; 0x07
    1694:	28 17       	cp	r18, r24
    1696:	39 07       	cpc	r19, r25
    1698:	4a 07       	cpc	r20, r26
    169a:	5b 07       	cpc	r21, r27
    169c:	18 f4       	brcc	.+6      	; 0x16a4 <__fpcmp_parts_f+0x8e>
    169e:	11 23       	and	r17, r17
    16a0:	41 f0       	breq	.+16     	; 0x16b2 <__fpcmp_parts_f+0x9c>
    16a2:	0a c0       	rjmp	.+20     	; 0x16b8 <__fpcmp_parts_f+0xa2>
    16a4:	82 17       	cp	r24, r18
    16a6:	93 07       	cpc	r25, r19
    16a8:	a4 07       	cpc	r26, r20
    16aa:	b5 07       	cpc	r27, r21
    16ac:	40 f4       	brcc	.+16     	; 0x16be <__fpcmp_parts_f+0xa8>
    16ae:	11 23       	and	r17, r17
    16b0:	19 f0       	breq	.+6      	; 0x16b8 <__fpcmp_parts_f+0xa2>
    16b2:	61 e0       	ldi	r22, 0x01	; 1
    16b4:	70 e0       	ldi	r23, 0x00	; 0
    16b6:	05 c0       	rjmp	.+10     	; 0x16c2 <__fpcmp_parts_f+0xac>
    16b8:	6f ef       	ldi	r22, 0xFF	; 255
    16ba:	7f ef       	ldi	r23, 0xFF	; 255
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <__fpcmp_parts_f+0xac>
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	cb 01       	movw	r24, r22
    16c4:	1f 91       	pop	r17
    16c6:	08 95       	ret

000016c8 <__prologue_saves__>:
    16c8:	2f 92       	push	r2
    16ca:	3f 92       	push	r3
    16cc:	4f 92       	push	r4
    16ce:	5f 92       	push	r5
    16d0:	6f 92       	push	r6
    16d2:	7f 92       	push	r7
    16d4:	8f 92       	push	r8
    16d6:	9f 92       	push	r9
    16d8:	af 92       	push	r10
    16da:	bf 92       	push	r11
    16dc:	cf 92       	push	r12
    16de:	df 92       	push	r13
    16e0:	ef 92       	push	r14
    16e2:	ff 92       	push	r15
    16e4:	0f 93       	push	r16
    16e6:	1f 93       	push	r17
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	ca 1b       	sub	r28, r26
    16f2:	db 0b       	sbc	r29, r27
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	09 94       	ijmp

00001700 <__epilogue_restores__>:
    1700:	2a 88       	ldd	r2, Y+18	; 0x12
    1702:	39 88       	ldd	r3, Y+17	; 0x11
    1704:	48 88       	ldd	r4, Y+16	; 0x10
    1706:	5f 84       	ldd	r5, Y+15	; 0x0f
    1708:	6e 84       	ldd	r6, Y+14	; 0x0e
    170a:	7d 84       	ldd	r7, Y+13	; 0x0d
    170c:	8c 84       	ldd	r8, Y+12	; 0x0c
    170e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1710:	aa 84       	ldd	r10, Y+10	; 0x0a
    1712:	b9 84       	ldd	r11, Y+9	; 0x09
    1714:	c8 84       	ldd	r12, Y+8	; 0x08
    1716:	df 80       	ldd	r13, Y+7	; 0x07
    1718:	ee 80       	ldd	r14, Y+6	; 0x06
    171a:	fd 80       	ldd	r15, Y+5	; 0x05
    171c:	0c 81       	ldd	r16, Y+4	; 0x04
    171e:	1b 81       	ldd	r17, Y+3	; 0x03
    1720:	aa 81       	ldd	r26, Y+2	; 0x02
    1722:	b9 81       	ldd	r27, Y+1	; 0x01
    1724:	ce 0f       	add	r28, r30
    1726:	d1 1d       	adc	r29, r1
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	ed 01       	movw	r28, r26
    1734:	08 95       	ret

00001736 <itoa>:
    1736:	e6 2f       	mov	r30, r22
    1738:	f7 2f       	mov	r31, r23
    173a:	2e 2f       	mov	r18, r30
    173c:	3f 2f       	mov	r19, r31
    173e:	e8 94       	clt
    1740:	42 30       	cpi	r20, 0x02	; 2
    1742:	c4 f0       	brlt	.+48     	; 0x1774 <itoa+0x3e>
    1744:	45 32       	cpi	r20, 0x25	; 37
    1746:	b4 f4       	brge	.+44     	; 0x1774 <itoa+0x3e>
    1748:	4a 30       	cpi	r20, 0x0A	; 10
    174a:	29 f4       	brne	.+10     	; 0x1756 <itoa+0x20>
    174c:	97 fb       	bst	r25, 7
    174e:	1e f4       	brtc	.+6      	; 0x1756 <itoa+0x20>
    1750:	90 95       	com	r25
    1752:	81 95       	neg	r24
    1754:	9f 4f       	sbci	r25, 0xFF	; 255
    1756:	64 2f       	mov	r22, r20
    1758:	77 27       	eor	r23, r23
    175a:	22 d0       	rcall	.+68     	; 0x17a0 <__udivmodhi4>
    175c:	80 5d       	subi	r24, 0xD0	; 208
    175e:	8a 33       	cpi	r24, 0x3A	; 58
    1760:	0c f0       	brlt	.+2      	; 0x1764 <itoa+0x2e>
    1762:	89 5d       	subi	r24, 0xD9	; 217
    1764:	81 93       	st	Z+, r24
    1766:	86 2f       	mov	r24, r22
    1768:	97 2f       	mov	r25, r23
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	a1 f7       	brne	.-24     	; 0x1756 <itoa+0x20>
    176e:	16 f4       	brtc	.+4      	; 0x1774 <itoa+0x3e>
    1770:	5d e2       	ldi	r21, 0x2D	; 45
    1772:	51 93       	st	Z+, r21
    1774:	10 82       	st	Z, r1
    1776:	82 2f       	mov	r24, r18
    1778:	93 2f       	mov	r25, r19
    177a:	00 c0       	rjmp	.+0      	; 0x177c <strrev>

0000177c <strrev>:
    177c:	a8 2f       	mov	r26, r24
    177e:	b9 2f       	mov	r27, r25
    1780:	e8 2f       	mov	r30, r24
    1782:	f9 2f       	mov	r31, r25
    1784:	67 2f       	mov	r22, r23
    1786:	71 91       	ld	r23, Z+
    1788:	77 23       	and	r23, r23
    178a:	e1 f7       	brne	.-8      	; 0x1784 <strrev+0x8>
    178c:	32 97       	sbiw	r30, 0x02	; 2
    178e:	04 c0       	rjmp	.+8      	; 0x1798 <strrev+0x1c>
    1790:	7c 91       	ld	r23, X
    1792:	6d 93       	st	X+, r22
    1794:	70 83       	st	Z, r23
    1796:	62 91       	ld	r22, -Z
    1798:	ae 17       	cp	r26, r30
    179a:	bf 07       	cpc	r27, r31
    179c:	c8 f3       	brcs	.-14     	; 0x1790 <strrev+0x14>
    179e:	08 95       	ret

000017a0 <__udivmodhi4>:
    17a0:	aa 1b       	sub	r26, r26
    17a2:	bb 1b       	sub	r27, r27
    17a4:	51 e1       	ldi	r21, 0x11	; 17
    17a6:	07 c0       	rjmp	.+14     	; 0x17b6 <__udivmodhi4_ep>

000017a8 <__udivmodhi4_loop>:
    17a8:	aa 1f       	adc	r26, r26
    17aa:	bb 1f       	adc	r27, r27
    17ac:	a6 17       	cp	r26, r22
    17ae:	b7 07       	cpc	r27, r23
    17b0:	10 f0       	brcs	.+4      	; 0x17b6 <__udivmodhi4_ep>
    17b2:	a6 1b       	sub	r26, r22
    17b4:	b7 0b       	sbc	r27, r23

000017b6 <__udivmodhi4_ep>:
    17b6:	88 1f       	adc	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	5a 95       	dec	r21
    17bc:	a9 f7       	brne	.-22     	; 0x17a8 <__udivmodhi4_loop>
    17be:	80 95       	com	r24
    17c0:	90 95       	com	r25
    17c2:	bc 01       	movw	r22, r24
    17c4:	cd 01       	movw	r24, r26
    17c6:	08 95       	ret

000017c8 <_exit>:
    17c8:	f8 94       	cli

000017ca <__stop_program>:
    17ca:	ff cf       	rjmp	.-2      	; 0x17ca <__stop_program>
