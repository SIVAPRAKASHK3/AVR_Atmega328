
bin\Debug\Game_Of_Led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000003ea  0000049e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ea  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080010c  0080010c  000004aa  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  000004ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000d2  00000000  00000000  000004cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000285  00000000  00000000  0000059f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000126  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000023d  00000000  00000000  0000094a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000ff  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int pin_number[4]={0,1,2,3};
int confident_press[2];
int confident_release[2];
int state[2]={1,1};
int main(void)
{
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62

DDRC = 0b11111101;
  ae:	e7 e2       	ldi	r30, 0x27	; 39
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	8d ef       	ldi	r24, 0xFD	; 253
  b4:	80 83       	st	Z, r24
DDRD = 0b11101111;
  b6:	ea e2       	ldi	r30, 0x2A	; 42
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	8f ee       	ldi	r24, 0xEF	; 239
  bc:	80 83       	st	Z, r24

PORTC |=1<<PIN1;
  be:	a8 e2       	ldi	r26, 0x28	; 40
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	e8 e2       	ldi	r30, 0x28	; 40
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	8c 93       	st	X, r24
PORTD |=1<<PIN4;
  cc:	ab e2       	ldi	r26, 0x2B	; 43
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	eb e2       	ldi	r30, 0x2B	; 43
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 61       	ori	r24, 0x10	; 16
  d8:	8c 93       	st	X, r24
//PORTC |=1<<PIN1;

press_count[0]=2;
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 0d 01 	sts	0x010D, r25
  e2:	80 93 0c 01 	sts	0x010C, r24
    while(1)
    {
      if(bit_is_clear(PINC,1))
  e6:	e6 e2       	ldi	r30, 0x26	; 38
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 2f       	mov	r24, r24
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	82 70       	andi	r24, 0x02	; 2
  f2:	90 70       	andi	r25, 0x00	; 0
  f4:	00 97       	sbiw	r24, 0x00	; 0
  f6:	29 f4       	brne	.+10     	; 0x102 <main+0x5c>
       {
             blink_led(0);
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 b9 00 	call	0x172	; 0x172 <blink_led>
 100:	04 c0       	rjmp	.+8      	; 0x10a <main+0x64>
        }
       else {
            reset_led(0);
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <reset_led>
        }
      if(bit_is_clear(PIND,4))
 10a:	e9 e2       	ldi	r30, 0x29	; 41
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	88 2f       	mov	r24, r24
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	80 71       	andi	r24, 0x10	; 16
 116:	90 70       	andi	r25, 0x00	; 0
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	29 f4       	brne	.+10     	; 0x126 <main+0x80>
       {
             blink_led(1);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 b9 00 	call	0x172	; 0x172 <blink_led>
 124:	04 c0       	rjmp	.+8      	; 0x12e <main+0x88>
        }
        else{
            reset_led(1);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <reset_led>
        }
        if(count[0]==4){
 12e:	80 91 14 01 	lds	r24, 0x0114
 132:	90 91 15 01 	lds	r25, 0x0115
 136:	84 30       	cpi	r24, 0x04	; 4
 138:	91 05       	cpc	r25, r1
 13a:	41 f4       	brne	.+16     	; 0x14c <main+0xa6>
             PORTC |= 1<<6;
 13c:	a8 e2       	ldi	r26, 0x28	; 40
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e8 e2       	ldi	r30, 0x28	; 40
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	80 64       	ori	r24, 0x40	; 64
 148:	8c 93       	st	X, r24
 14a:	0e c0       	rjmp	.+28     	; 0x168 <main+0xc2>
            break;
        }
        else if(count[1]==4){
 14c:	80 91 16 01 	lds	r24, 0x0116
 150:	90 91 17 01 	lds	r25, 0x0117
 154:	84 30       	cpi	r24, 0x04	; 4
 156:	91 05       	cpc	r25, r1
 158:	31 f6       	brne	.-116    	; 0xe6 <main+0x40>
            PORTD |= 1<<5;
 15a:	ab e2       	ldi	r26, 0x2B	; 43
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	eb e2       	ldi	r30, 0x2B	; 43
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	80 62       	ori	r24, 0x20	; 32
 166:	8c 93       	st	X, r24
            break;
        }
    }
    return 0;
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
}
 16c:	cf 91       	pop	r28
 16e:	df 91       	pop	r29
 170:	08 95       	ret

00000172 <blink_led>:
void blink_led(int led){
 172:	df 93       	push	r29
 174:	cf 93       	push	r28
 176:	00 d0       	rcall	.+0      	; 0x178 <blink_led+0x6>
 178:	00 d0       	rcall	.+0      	; 0x17a <blink_led+0x8>
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	9c 83       	std	Y+4, r25	; 0x04
 180:	8b 83       	std	Y+3, r24	; 0x03
int x;
confident_press[led]++;
 182:	2b 81       	ldd	r18, Y+3	; 0x03
 184:	3c 81       	ldd	r19, Y+4	; 0x04
 186:	c9 01       	movw	r24, r18
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	fc 01       	movw	r30, r24
 18e:	e8 5e       	subi	r30, 0xE8	; 232
 190:	fe 4f       	sbci	r31, 0xFE	; 254
 192:	80 81       	ld	r24, Z
 194:	91 81       	ldd	r25, Z+1	; 0x01
 196:	ac 01       	movw	r20, r24
 198:	4f 5f       	subi	r20, 0xFF	; 255
 19a:	5f 4f       	sbci	r21, 0xFF	; 255
 19c:	c9 01       	movw	r24, r18
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	fc 01       	movw	r30, r24
 1a4:	e8 5e       	subi	r30, 0xE8	; 232
 1a6:	fe 4f       	sbci	r31, 0xFE	; 254
 1a8:	51 83       	std	Z+1, r21	; 0x01
 1aa:	40 83       	st	Z, r20
if(confident_press[led]>500)
 1ac:	8b 81       	ldd	r24, Y+3	; 0x03
 1ae:	9c 81       	ldd	r25, Y+4	; 0x04
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	fc 01       	movw	r30, r24
 1b6:	e8 5e       	subi	r30, 0xE8	; 232
 1b8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ba:	80 81       	ld	r24, Z
 1bc:	91 81       	ldd	r25, Z+1	; 0x01
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	85 3f       	cpi	r24, 0xF5	; 245
 1c2:	92 07       	cpc	r25, r18
 1c4:	0c f4       	brge	.+2      	; 0x1c8 <blink_led+0x56>
 1c6:	6f c0       	rjmp	.+222    	; 0x2a6 <blink_led+0x134>
   {
    if(state[led]==1){
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	9c 81       	ldd	r25, Y+4	; 0x04
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	fc 01       	movw	r30, r24
 1d2:	e8 5f       	subi	r30, 0xF8	; 248
 1d4:	fe 4f       	sbci	r31, 0xFE	; 254
 1d6:	80 81       	ld	r24, Z
 1d8:	91 81       	ldd	r25, Z+1	; 0x01
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	91 05       	cpc	r25, r1
 1de:	09 f0       	breq	.+2      	; 0x1e2 <blink_led+0x70>
 1e0:	62 c0       	rjmp	.+196    	; 0x2a6 <blink_led+0x134>
       if(led==0){
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	9c 81       	ldd	r25, Y+4	; 0x04
 1e6:	00 97       	sbiw	r24, 0x00	; 0
 1e8:	c9 f4       	brne	.+50     	; 0x21c <blink_led+0xaa>
        togelel(0);
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 9b 01 	call	0x336	; 0x336 <togelel>
        count[led]++;
 1f2:	2b 81       	ldd	r18, Y+3	; 0x03
 1f4:	3c 81       	ldd	r19, Y+4	; 0x04
 1f6:	c9 01       	movw	r24, r18
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	fc 01       	movw	r30, r24
 1fe:	ec 5e       	subi	r30, 0xEC	; 236
 200:	fe 4f       	sbci	r31, 0xFE	; 254
 202:	80 81       	ld	r24, Z
 204:	91 81       	ldd	r25, Z+1	; 0x01
 206:	ac 01       	movw	r20, r24
 208:	4f 5f       	subi	r20, 0xFF	; 255
 20a:	5f 4f       	sbci	r21, 0xFF	; 255
 20c:	c9 01       	movw	r24, r18
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	fc 01       	movw	r30, r24
 214:	ec 5e       	subi	r30, 0xEC	; 236
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	51 83       	std	Z+1, r21	; 0x01
 21a:	40 83       	st	Z, r20
       }
       if(led==1){
 21c:	8b 81       	ldd	r24, Y+3	; 0x03
 21e:	9c 81       	ldd	r25, Y+4	; 0x04
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	91 05       	cpc	r25, r1
 224:	c9 f4       	brne	.+50     	; 0x258 <blink_led+0xe6>
        togelel_(1);
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 c7 01 	call	0x38e	; 0x38e <togelel_>
        count[led]++;
 22e:	2b 81       	ldd	r18, Y+3	; 0x03
 230:	3c 81       	ldd	r19, Y+4	; 0x04
 232:	c9 01       	movw	r24, r18
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	fc 01       	movw	r30, r24
 23a:	ec 5e       	subi	r30, 0xEC	; 236
 23c:	fe 4f       	sbci	r31, 0xFE	; 254
 23e:	80 81       	ld	r24, Z
 240:	91 81       	ldd	r25, Z+1	; 0x01
 242:	ac 01       	movw	r20, r24
 244:	4f 5f       	subi	r20, 0xFF	; 255
 246:	5f 4f       	sbci	r21, 0xFF	; 255
 248:	c9 01       	movw	r24, r18
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	fc 01       	movw	r30, r24
 250:	ec 5e       	subi	r30, 0xEC	; 236
 252:	fe 4f       	sbci	r31, 0xFE	; 254
 254:	51 83       	std	Z+1, r21	; 0x01
 256:	40 83       	st	Z, r20
       }
       confident_press[led]=0;
 258:	8b 81       	ldd	r24, Y+3	; 0x03
 25a:	9c 81       	ldd	r25, Y+4	; 0x04
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	fc 01       	movw	r30, r24
 262:	e8 5e       	subi	r30, 0xE8	; 232
 264:	fe 4f       	sbci	r31, 0xFE	; 254
 266:	11 82       	std	Z+1, r1	; 0x01
 268:	10 82       	st	Z, r1
       press_count[led]++;
 26a:	2b 81       	ldd	r18, Y+3	; 0x03
 26c:	3c 81       	ldd	r19, Y+4	; 0x04
 26e:	c9 01       	movw	r24, r18
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	fc 01       	movw	r30, r24
 276:	e4 5f       	subi	r30, 0xF4	; 244
 278:	fe 4f       	sbci	r31, 0xFE	; 254
 27a:	80 81       	ld	r24, Z
 27c:	91 81       	ldd	r25, Z+1	; 0x01
 27e:	ac 01       	movw	r20, r24
 280:	4f 5f       	subi	r20, 0xFF	; 255
 282:	5f 4f       	sbci	r21, 0xFF	; 255
 284:	c9 01       	movw	r24, r18
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	fc 01       	movw	r30, r24
 28c:	e4 5f       	subi	r30, 0xF4	; 244
 28e:	fe 4f       	sbci	r31, 0xFE	; 254
 290:	51 83       	std	Z+1, r21	; 0x01
 292:	40 83       	st	Z, r20
        state[led]=0;}
 294:	8b 81       	ldd	r24, Y+3	; 0x03
 296:	9c 81       	ldd	r25, Y+4	; 0x04
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	fc 01       	movw	r30, r24
 29e:	e8 5f       	subi	r30, 0xF8	; 248
 2a0:	fe 4f       	sbci	r31, 0xFE	; 254
 2a2:	11 82       	std	Z+1, r1	; 0x01
 2a4:	10 82       	st	Z, r1
    }
}
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	cf 91       	pop	r28
 2b0:	df 91       	pop	r29
 2b2:	08 95       	ret

000002b4 <reset_led>:
void reset_led(int num)
{
 2b4:	df 93       	push	r29
 2b6:	cf 93       	push	r28
 2b8:	00 d0       	rcall	.+0      	; 0x2ba <reset_led+0x6>
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	9a 83       	std	Y+2, r25	; 0x02
 2c0:	89 83       	std	Y+1, r24	; 0x01
    confident_release[num]++;
 2c2:	29 81       	ldd	r18, Y+1	; 0x01
 2c4:	3a 81       	ldd	r19, Y+2	; 0x02
 2c6:	c9 01       	movw	r24, r18
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	fc 01       	movw	r30, r24
 2ce:	e4 5e       	subi	r30, 0xE4	; 228
 2d0:	fe 4f       	sbci	r31, 0xFE	; 254
 2d2:	80 81       	ld	r24, Z
 2d4:	91 81       	ldd	r25, Z+1	; 0x01
 2d6:	ac 01       	movw	r20, r24
 2d8:	4f 5f       	subi	r20, 0xFF	; 255
 2da:	5f 4f       	sbci	r21, 0xFF	; 255
 2dc:	c9 01       	movw	r24, r18
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	fc 01       	movw	r30, r24
 2e4:	e4 5e       	subi	r30, 0xE4	; 228
 2e6:	fe 4f       	sbci	r31, 0xFE	; 254
 2e8:	51 83       	std	Z+1, r21	; 0x01
 2ea:	40 83       	st	Z, r20
    if(confident_release[num]>200)
 2ec:	89 81       	ldd	r24, Y+1	; 0x01
 2ee:	9a 81       	ldd	r25, Y+2	; 0x02
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	fc 01       	movw	r30, r24
 2f6:	e4 5e       	subi	r30, 0xE4	; 228
 2f8:	fe 4f       	sbci	r31, 0xFE	; 254
 2fa:	80 81       	ld	r24, Z
 2fc:	91 81       	ldd	r25, Z+1	; 0x01
 2fe:	89 3c       	cpi	r24, 0xC9	; 201
 300:	91 05       	cpc	r25, r1
 302:	a4 f0       	brlt	.+40     	; 0x32c <reset_led+0x78>
    {
        state[num]=1;
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	9a 81       	ldd	r25, Y+2	; 0x02
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	fc 01       	movw	r30, r24
 30e:	e8 5f       	subi	r30, 0xF8	; 248
 310:	fe 4f       	sbci	r31, 0xFE	; 254
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	91 83       	std	Z+1, r25	; 0x01
 318:	80 83       	st	Z, r24
        confident_release[num]=0;
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	9a 81       	ldd	r25, Y+2	; 0x02
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	fc 01       	movw	r30, r24
 324:	e4 5e       	subi	r30, 0xE4	; 228
 326:	fe 4f       	sbci	r31, 0xFE	; 254
 328:	11 82       	std	Z+1, r1	; 0x01
 32a:	10 82       	st	Z, r1

    }
}
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	cf 91       	pop	r28
 332:	df 91       	pop	r29
 334:	08 95       	ret

00000336 <togelel>:

void togelel(int led)
{
 336:	df 93       	push	r29
 338:	cf 93       	push	r28
 33a:	00 d0       	rcall	.+0      	; 0x33c <togelel+0x6>
 33c:	00 d0       	rcall	.+0      	; 0x33e <togelel+0x8>
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
 342:	9c 83       	std	Y+4, r25	; 0x04
 344:	8b 83       	std	Y+3, r24	; 0x03
   int x=0;
 346:	1a 82       	std	Y+2, r1	; 0x02
 348:	19 82       	std	Y+1, r1	; 0x01
        x=press_count[led];
 34a:	8b 81       	ldd	r24, Y+3	; 0x03
 34c:	9c 81       	ldd	r25, Y+4	; 0x04
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	fc 01       	movw	r30, r24
 354:	e4 5f       	subi	r30, 0xF4	; 244
 356:	fe 4f       	sbci	r31, 0xFE	; 254
 358:	80 81       	ld	r24, Z
 35a:	91 81       	ldd	r25, Z+1	; 0x01
 35c:	9a 83       	std	Y+2, r25	; 0x02
 35e:	89 83       	std	Y+1, r24	; 0x01
        PORTC |= 1<<x;
 360:	a8 e2       	ldi	r26, 0x28	; 40
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	e8 e2       	ldi	r30, 0x28	; 40
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	28 2f       	mov	r18, r24
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	09 80       	ldd	r0, Y+1	; 0x01
 372:	02 c0       	rjmp	.+4      	; 0x378 <togelel+0x42>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <togelel+0x3e>
 37c:	82 2b       	or	r24, r18
 37e:	8c 93       	st	X, r24
}
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	cf 91       	pop	r28
 38a:	df 91       	pop	r29
 38c:	08 95       	ret

0000038e <togelel_>:

void togelel_(int led)
{
 38e:	df 93       	push	r29
 390:	cf 93       	push	r28
 392:	00 d0       	rcall	.+0      	; 0x394 <togelel_+0x6>
 394:	00 d0       	rcall	.+0      	; 0x396 <togelel_+0x8>
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	9c 83       	std	Y+4, r25	; 0x04
 39c:	8b 83       	std	Y+3, r24	; 0x03
   int x=0;
 39e:	1a 82       	std	Y+2, r1	; 0x02
 3a0:	19 82       	std	Y+1, r1	; 0x01
        x=press_count[led];
 3a2:	8b 81       	ldd	r24, Y+3	; 0x03
 3a4:	9c 81       	ldd	r25, Y+4	; 0x04
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	fc 01       	movw	r30, r24
 3ac:	e4 5f       	subi	r30, 0xF4	; 244
 3ae:	fe 4f       	sbci	r31, 0xFE	; 254
 3b0:	80 81       	ld	r24, Z
 3b2:	91 81       	ldd	r25, Z+1	; 0x01
 3b4:	9a 83       	std	Y+2, r25	; 0x02
 3b6:	89 83       	std	Y+1, r24	; 0x01
        PORTD ^= 1<<x;
 3b8:	ab e2       	ldi	r26, 0x2B	; 43
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	eb e2       	ldi	r30, 0x2B	; 43
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	28 2f       	mov	r18, r24
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	09 80       	ldd	r0, Y+1	; 0x01
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <togelel_+0x42>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	0a 94       	dec	r0
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <togelel_+0x3e>
 3d4:	82 27       	eor	r24, r18
 3d6:	8c 93       	st	X, r24
}
 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	cf 91       	pop	r28
 3e2:	df 91       	pop	r29
 3e4:	08 95       	ret

000003e6 <_exit>:
 3e6:	f8 94       	cli

000003e8 <__stop_program>:
 3e8:	ff cf       	rjmp	.-2      	; 0x3e8 <__stop_program>
